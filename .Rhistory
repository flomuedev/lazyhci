condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`
)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
##tct
lazy_plot(data.model, dv = "TCT", fun.error = se)
##tct
lazy_plot(data.model, dv = "tct", fun.error = se)
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov")
data.pin.analysis.tct
plot(data.pin.analysis.tct$normality_test)
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = log)
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = "log")
library(dplyr)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = "log")
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = "log")
data.pin.analysis.tct
plot(data.pin.analysis.tct$normality_test)
data.pin.analysis.tct$post_hoc$`redirection:size`$interaction_plot
data.pin.analysis$post_hoc$`redirection:size`$`emmeans of redirection, size`
data.pin.analysis.tct$post_hoc$`redirection:size`$interaction_plot
data.pin.analysis.tct$post_hoc$`redirection:size
''
asd
;
`
data.pin.analysis.tct$post_hoc$`redirection:size`
print(data.pin.analysis.tct$post_hoc$`redirection:size`, type = "response")
summary(data.pin.analysis.tct$post_hoc$`redirection:size`)
summary(data.pin.analysis.tct$post_hoc$`redirection:size`$`emmeans of redirection, size`)
summary(data.pin.analysis.tct$post_hoc$`redirection:size`$`emmeans of redirection, size`, type = "response")
summary(data.pin.analysis.tct$post_hoc$`redirection:size`
s
data.pin.analysis.tct$post_hoc$`redirection:size`
data.pin.analysis.tct$post_hoc$`redirection:size`$interaction_plot
data.pin.analysis.tct$post_hoc$`redirection:size`$`pairwise differences of redirection, size`
print(data.pin.analysis.tct$post_hoc$`redirection:size`$`pairwise differences of redirection, size`, type = "response")
getwd()
devtools::load_all()
library(dplyr)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw.pin <- lazy_load(pattern = "StudyDataCSV/{*}/summaryPIN_{pid}_{condition}.csv", read = readr::read_csv2)
setwd(path.cur)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`
)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
##tct
lazy_plot(data.model, dv = "tct", fun.error = se)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = "log")
devtools::load_all()
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov", transformation = "log")
data.pin.analysis.tct$post_hoc$`redirection:size`$interaction_plot
##tct
lazy_plot(data.model, dv = "tct", fun.error = se)
data.pin.analysis.tct
data.pin.analysis.tct$model
data.pin.analysis.tct$model$aov
summary(data.pin.analysis.tct$model)
s <- summary(data.pin.analysis.tct$model)
s$sphericity.tests
s$repeated
s$type
s$multivariate.tests
s$univariate.tests
s$pval.adjustments
data.pin.analysis.tct
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
x[["sphericity_test"]]
q <-x[["sphericity_test"]]
q <-x[["sphericity_test"]][["names"]]
q <-x[["sphericity_test"]]
q
q$
1
q$test
q[["test"]]
x[["sphericity_test"]] < 0.05
x[["sphericity_test"]][[1]]
length(x[["sphericity_test"]])
names(x[["sphericity_test"]])
names(x[["sphericity_test"]])[1]
devtools::load_all()
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
p.value
cat(p.value)
devtools::load_all()
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
data.pin.analysis.tct
data.pin.analysis.tct
data.pin.analysis.tct
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
summary(data.pin.analysis.tct$model)
s <-summary(data.pin.analysis.tct$model)
s$sphericity.tests
s$pval.adjustments
q <- s$pval.adjustments
q["redirection"]
q["redirection"]
View(q)
q["GG eps"]
q["redirection", "GG eps"]
summary(data.pin.analysis.tct$model)$pval.adjustments
summary(data.pin.analysis.tct$model)$pval.adjustments["redirection", "GG eps"]
devtools::load_all()
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
devtools::load_all()
data.pin.analysis.tct
data.pin.analysis.tct$normality_test
q <- data.pin.analysis.tct$normality_test
q
q <- data.pin.analysis.tct$sphericity_test
plot(q)
data.pin.analysis.tct
View(data.pin)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
across(Input, str_replace, '-2', 'x')
)
View(data.pin)
library(stringr)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
across(Input, str_replace, '-2', 'x')
)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
across(Input, \(x) str_replace(string=x,pattern = "-2", replacement = x))
)
View(data.raw.pin)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
across(Input, \(x) str_replace(string=x,pattern = "-2", replacement = x))
)
View(data.pin)
library(lazyhci)
library(dplyr)
library(stringr)
library(tidyr)
###
compare_str <- function(x,y) {
x_list <- str_split(x, pattern = "")
y_list <- str_split(y, pattern = "")
if(length(x_list) != length(y_list))
stop("nope")
res <- c()
for(i in seq_len(length(x_list))) {
res <- c(res, x_list[[i]] == y_list[[i]])
}
return(res)
}
###
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw.pin <- lazy_load(pattern = "StudyDataCSV/{*}/summaryPIN_{pid}_{condition}.csv", read = readr::read_csv2)
data.raw.questionnaire <- lazy_load(pattern = "StudyDataCSV/{*}/questionnaire_{pid}_{condition}.csv", read = readr::read_csv2)
setwd(path.cur)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
across(Input, \(x) str_replace_all(string=x, pattern = "-1|-2", replacement = "x")),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
input_error_codes = str_count(Input, "x")
) %>%
rowwise() %>%
mutate(input_error_positions = list(compare_str(Input, PIN)),
input_errors = sum(input_error_positions == FALSE))
data.questionnaire <- data.raw.questionnaire %>%
mutate(condition = as.numeric(condition)) %>%
filter(condition < 15) %>%
mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
)) %>%
pivot_wider(names_from = "Question", values_from = "Answer") %>%
mutate(
tlx_raw = rowSums(across(c(5:10))) * 5 / 6
)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.model.questionnaire <- lazy_model(data.questionnaire, participant = "pid", within.vars = c("redirection", "size"))
#accuracy
lazy_plot(data.model, dv = "correct", fun.error = se)
data.pin.analysis.accuracy <- lazy_analyze(data.model, dv = "correct", analysis_type = "glme", family = "binomial")
## nr of errors
lazy_plot(data.model, dv = "input_errors", fun.error = se)
data.pin.analysis.accuracy.bynr <- lazy_analyze(data.model, dv = "input_errors", analysis_type = "glme", family = "poisson")
##tct
lazy_plot(data.model, dv = "tct", fun.error = se)
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov")
##tlx
lazy_plot(data.model.questionnaire, dv = "tlx_raw", fun.error = se, na.rm = TRUE)
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE)
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
lazy_plot_likert(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?")
data.model.questionnairedata.model.questionnaire
data.questionnaire$`In a shared space, how concerned would you be that bystanders can guess your input?`
lazy_plot(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?")
lazy_plot(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", na.rm = TRUE)
lazy_plot(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", na.rm = TRUE, fun.error = se)
data.pin.analysis.q <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
q
data.pin.analysis.q
#accuracy
lazy_plot(data.model, dv = "correct", fun.error = se)
library(ggplot2)
#accuracy
p.accuracy <- lazy_plot(data.model, dv = "correct", fun.error = se)
#accuracy
p.accuracy <- lazy_plot(data.model, dv = "correct", fun.error = se)
ggsave(p.accuracy,path = "accuracy.pdf")
ggsave(p.accuracy, path = file.path("accuracy.pdf"))
ggsave(p.accuracy, path = file.path(getwd(), "accuracy.pdf"))
ggsave("accuracy.pdf", plot = p.accuracy)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ggsave("accuracy.pdf", plot = p.accuracy)
#accuracy
p.accuracy <- lazy_plot(data.model, dv = "correct", fun.error = se)
ggsave("accuracy.pdf", plot = p.accuracy)
## nr of errors
p.nrerrors <- lazy_plot(data.model, dv = "input_errors", fun.error = se)
ggsave("nrerrors.pdf", plot = p.nrerrors)
##tct
p.tct <- lazy_plot(data.model, dv = "tct", fun.error = se)
ggsave("tct.pdf", plot = p.tct)
##tlx
p.tlx <- lazy_plot(data.model.questionnaire, dv = "tlx_raw", fun.error = se, na.rm = TRUE)
ggsave("tlx.pdf", plot = p.tlx)
p.concerned <- lazy_plot(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", na.rm = TRUE, fun.error = se)
ggsave("concerned.pdf", plot = p.concerned)
data.pin.analysis.accuracy
fileConn<-file("output.txt")
writeLines(data.pin.analysis.accuracy, fileConn)
fileConn<-file("output.txt")
writeLines(cat(data.pin.analysis.accuracy), fileConn)
#accuracy
p.accuracy <- lazy_plot(data.model, dv = "correct", fun.error = se)
data.pin.analysis.accuracy
data.pin.analysis.accuracy.bynr
data.pin.analysis.tct
data.pin.analysis.tlx
data.pin.analysis.q
p.accuracy
data.pin.analysis.accuracy
data.pin.analysis.accuracy.bynr
data.pin.analysis.tct
data.pin.analysis.tlx
data.pin.analysis.q
library(lazyhci)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
###
compare_str <- function(x,y) {
x_list <- str_split(x, pattern = "")
y_list <- str_split(y, pattern = "")
if(length(x_list) != length(y_list))
stop("nope")
res <- c()
for(i in seq_len(length(x_list))) {
res <- c(res, x_list[[i]] == y_list[[i]])
}
return(res)
}
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw.pin <- lazy_load(pattern = "StudyDataCSV/{*}/summaryPIN_{pid}_{condition}.csv", read = readr::read_csv2)
data.raw.questionnaire <- lazy_load(pattern = "StudyDataCSV/{*}/questionnaire_{pid}_{condition}.csv", read = readr::read_csv2)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
across(Input, \(x) str_replace_all(string=x, pattern = "-1|-2", replacement = "x")),
correct = PIN == Input,
tct = `End Time` - `Starting Time`,
input_error_codes = str_count(Input, "x")
) %>%
rowwise() %>%
mutate(input_error_positions = list(compare_str(Input, PIN)),
input_errors = sum(input_error_positions == FALSE))
data.questionnaire <- data.raw.questionnaire %>%
mutate(condition = as.numeric(condition)) %>%
filter(condition < 15) %>%
mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
)) %>%
pivot_wider(names_from = "Question", values_from = "Answer") %>%
mutate(
tlx_raw = rowSums(across(c(5:10))) * 5 / 6
)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
View(data.raw.pin)
View(data.pin)
View(data.raw.questionnaire)
View(data.questionnaire)
View(data.questionnaire)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
View(data.questionnaire)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.model.questionnaire <- lazy_model(data.questionnaire, participant = "pid", within.vars = c("redirection", "size"))
##tlx
p.tlx <- lazy_plot(data.model.questionnaire, dv = "tlx_raw", fun.error = se, na.rm = TRUE)
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
p.tlx
data.pin.analysis.tlx
data.pin.analysis.q <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
data.pin.analysis.q <- lazy_analyze(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
data.pin.analysis.q
## nr of errors
p.nrerrors <- lazy_plot(data.model, dv = "input_errors", fun.error = se)
p.nrerrors
data.pin.analysis.accuracy.bynr <- lazy_analyze(data.model, dv = "input_errors", analysis_type = "glme", family = "poisson")
p.accuracy
#accuracy
p.accuracy <- lazy_plot(data.model, dv = "correct", fun.error = se)
p.accuracy
##tct
p.tct <- lazy_plot(data.model, dv = "tct", fun.error = se)
p.tct
p.tlx
data.pin.analysis.tlx
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
across(Input, \(x) str_replace_all(string=x, pattern = "-1|-2", replacement = "x")),
correct = PIN == Input,
tct = `End Time` - `Starting Time`
) %>%
rowwise() %>%
mutate(input_error_positions = list(compare_str(Input, PIN)),
input_errors = sum(input_error_positions == FALSE))
data.pin.analysis.tct
data.pin.analysis.tct <- lazy_analyze(data.model, dv = "tct", analysis_type = "aov")
data.pin.analysis.tct
data.pin.analysis.tct$normality_test
plot(data.pin.analysis.tct$normality_test)
data.pin.analysis.tct.art <- lazy_analyze(data.model, dv = "tct", analysis_type = "art")
data.pin.analysis.tct.art
data.pin.analysis.tlx
readClipboard()
readClipboard
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::install()
