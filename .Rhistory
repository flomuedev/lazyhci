nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
ggsave(filename = "interactions.pdf", plot = p.complete.withlegend, device = cairo_pdf, width = 15, height = 6)
p1
p1 + ylim(3.6, 5.0)
p1 <- p1 + ylim(c(min, max))
min <- 3.6
max <- 5
p1 <- p1 + ylim(c(min, max))
p1
p1 <- p1 + ylim(c(min, max))
p2 <- p2 + ylim(c(min, max))
p3 <- p3 + ylim(c(min, max))
p4 <- p4 + ylim(c(min, max))
p5 <- p5 + ylim(c(min, max))
leg1 <- get_legend(p1)
leg2 <- get_legend(p5)
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(leg1, leg2, nrow = 1
)
p.complete <- plot_grid(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
p5 + theme(legend.position = "none"),
nrow = 1,
align = "h",
axis = "t")
p.complete.withlegend <- plot_grid(p.complete,
plot_grid(
NULL,
leg12,
NULL,
nrow = 1,
rel_widths = c(0.5, 1, 0.5)
),
ncol = 1,
nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
p.complete.withlegend
min <- 3
max <- 5
p1 <- p1 + ylim(c(min, max))
p2 <- p2 + ylim(c(min, max))
p3 <- p3 + ylim(c(min, max))
p4 <- p4 + ylim(c(min, max))
p5 <- p5 + ylim(c(min, max))
leg1 <- get_legend(p1)
leg2 <- get_legend(p5)
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(leg1, leg2, nrow = 1
)
p.complete <- plot_grid(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
p5 + theme(legend.position = "none"),
nrow = 1,
align = "h",
axis = "t")
p.complete.withlegend <- plot_grid(p.complete,
plot_grid(
NULL,
leg12,
NULL,
nrow = 1,
rel_widths = c(0.5, 1, 0.5)
),
ncol = 1,
nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
p.complete.withlegend
min <- 3
max <- 4.55
p1 <- p1 + ylim(c(min, max))
p2 <- p2 + ylim(c(min, max))
p3 <- p3 + ylim(c(min, max))
p4 <- p4 + ylim(c(min, max))
p5 <- p5 + ylim(c(min, max))
leg1 <- get_legend(p1)
leg2 <- get_legend(p5)
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(leg1, leg2, nrow = 1
)
p.complete <- plot_grid(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
p5 + theme(legend.position = "none"),
nrow = 1,
align = "h",
axis = "t")
p.complete.withlegend <- plot_grid(p.complete,
plot_grid(
NULL,
leg12,
NULL,
nrow = 1,
rel_widths = c(0.5, 1, 0.5)
),
ncol = 1,
nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
p.complete.withlegend
dodge = .5
p1<-df %>%
group_by(Participant_ID, Space,Dimensionality) %>%
summarise(`Comfortable Seeing` = mean(`Comfortable Seeing`)) %>%
ggplot(aes(Dimensionality,`Comfortable Seeing`,color=Space))+
stat_summary(size = 1, geom = "errorbar", width = .2,position=position_dodge(dodge)) +
stat_summary(fun = mean, geom = "point", size = 3,position=position_dodge(dodge)) +
theme(legend.position = "none") +
theme_minimal(base_family = plots.font.family, base_size = plots.basesize) + theme(legend.position="bottom")
p2<-df %>%
group_by(Participant_ID, Space,Dimensionality) %>%
summarise(`Awkward Seeing` = mean(`Awkward Seeing`)) %>%
ggplot(aes(Dimensionality,`Awkward Seeing`,color=Space))+
stat_summary(size = 1, geom = "errorbar", width = .2,position=position_dodge(dodge)) +
stat_summary(fun = mean, geom = "point", size = 3,position=position_dodge(dodge)) +
theme(legend.position = "none") +
theme_minimal(base_family = plots.font.family, base_size = plots.basesize)
p3 <- df %>%
group_by(Participant_ID, Space,Dimensionality, Dynamics) %>%
summarise(`Awkward Seeing` = mean(`Awkward Seeing`)) %>%
ggplot(aes(Dimensionality,`Awkward Seeing`,color=Space))+
facet_grid(~Dynamics, switch = "x") +
stat_summary(size = 1, geom = "errorbar", width = .2,position=position_dodge(dodge)) +
stat_summary(fun = mean, geom = "point", size = 3,position=position_dodge(dodge)) +
theme(legend.position = "none") +
theme_minimal(base_family = plots.font.family, base_size = plots.basesize)
p4 <- df %>%
group_by(Participant_ID, Space,Dimensionality) %>%
summarise(`Like to See More` = mean(`Like to See More`)) %>%
ggplot(aes(Dimensionality,`Like to See More`,color=Space))+
stat_summary(size = 1, geom = "errorbar", width = .2,position=position_dodge(dodge)) +
stat_summary(fun = mean, geom = "point", size = 3,position=position_dodge(dodge)) +
theme(legend.position = "none") +
theme_minimal(base_family = plots.font.family, base_size = plots.basesize)
p5 <- df %>%
group_by(Participant_ID, Dynamics,Dimensionality) %>%
summarise(`Awkward Placing` = mean(`Awkward Placing`)) %>%
ggplot(aes(Dimensionality,`Awkward Placing`,color=Dynamics))+
stat_summary(size = 1, geom = "errorbar", width = .2,position=position_dodge(dodge)) +
stat_summary(fun = mean, geom = "point", size = 3,position=position_dodge(dodge)) +
theme(legend.position = "none") +
theme_minimal(base_family = plots.font.family, base_size = plots.basesize) + theme(legend.position="bottom")
setwd(path.cur)
p1 <- p1 + theme(axis.title.x = element_blank())
p2 <- p2 + theme(axis.title.x = element_blank())
p3 <- p3 + theme(axis.title.x = element_blank())
p4 <- p4 + theme(axis.title.x = element_blank())
p5 <- p5 + theme(axis.title.x = element_blank())
leg1 <- get_legend(p1)
leg2 <- get_legend(p5)
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(leg1, leg2, nrow = 1
)
p.complete <- plot_grid(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
p5 + theme(legend.position = "none"),
nrow = 1,
align = "h",
axis = "t")
p.complete.withlegend <- plot_grid(p.complete,
plot_grid(
NULL,
leg12,
NULL,
nrow = 1,
rel_widths = c(0.5, 1, 0.5)
),
ncol = 1,
nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
p.complete.withlegend
p1
p1 + ylim(3,4.4)
p1
p1 + coord_cartesian(ylim = c(3, 5))
min <- 3
max <- 4.55
p1 <- p1 + coord_cartesian(ylim = c(min, max))
p2 <- p2 + coord_cartesian(ylim = c(min, max))
p3 <- p3 + coord_cartesian(ylim = c(min, max))
p4 <- p4 + coord_cartesian(ylim = c(min, max))
p5 <- p5 + coord_cartesian(ylim = c(min, max))
leg1 <- get_legend(p1)
leg2 <- get_legend(p5)
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(leg1, leg2, nrow = 1
)
p.complete <- plot_grid(p1 + theme(legend.position = "none"),
p2 + theme(legend.position = "none"),
p3 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
p5 + theme(legend.position = "none"),
nrow = 1,
align = "h",
axis = "t")
p.complete.withlegend <- plot_grid(p.complete,
plot_grid(
NULL,
leg12,
NULL,
nrow = 1,
rel_widths = c(0.5, 1, 0.5)
),
ncol = 1,
nrow = 2,
align = "h",
axis = "t",
rel_heights = c(0.9, 0.1))
p.complete.withlegend
ggsave(filename = "interactions.pdf", plot = p.complete.withlegend, device = cairo_pdf, width = 15, height = 4)
ggsave(filename = "interactions.pdf", plot = p.complete.withlegend, device = cairo_pdf, width = 15, height = 6)
library(lazyhci)
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
###
compare_str <- function(x,y) {
x_list <- str_split(x, pattern = "")
y_list <- str_split(y, pattern = "")
if(length(x_list) != length(y_list))
stop("nope")
res <- c()
for(i in seq_len(length(x_list))) {
res <- c(res, x_list[[i]] == y_list[[i]])
}
return(res)
}
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw.pin <- lazy_load(pattern = "StudyDataCSV/{*}/summaryPIN_{pid}_{condition}.csv", read = readr::read_csv2)
data.raw.questionnaire <- lazy_load(pattern = "StudyDataCSV/{*}/questionnaire_{pid}_{condition}.csv", read = readr::read_csv2)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
across(Input, \(x) str_replace_all(string=x, pattern = "-1|-2", replacement = "x")),
correct = PIN == Input,
tct = `End Time` - `Starting Time`
) %>%
rowwise() %>%
mutate(input_error_positions = list(compare_str(Input, PIN)),
input_errors = sum(input_error_positions == FALSE))
data.questionnaire <- data.raw.questionnaire %>%
mutate(condition = as.numeric(condition)) %>%
filter(condition < 15) %>%
mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
)) %>%
pivot_wider(names_from = "Question", values_from = "Answer") %>%
mutate(
tlx_raw = rowSums(across(c(5:10))) * 5 / 6
)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.model.questionnaire <- lazy_model(data.questionnaire, participant = "pid", within.vars = c("redirection", "size"))
##tlx
p.tlx <- lazy_plot(data.model.questionnaire, dv = "tlx_raw", fun.error = se, na.rm = TRUE)
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
getwd()
devtools::load_all()
library(dplyr)
library(stringr)
library(tidyr)
library(ggplot2)
###
compare_str <- function(x,y) {
x_list <- str_split(x, pattern = "")
y_list <- str_split(y, pattern = "")
if(length(x_list) != length(y_list))
stop("nope")
res <- c()
for(i in seq_len(length(x_list))) {
res <- c(res, x_list[[i]] == y_list[[i]])
}
return(res)
}
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw.pin <- lazy_load(pattern = "StudyDataCSV/{*}/summaryPIN_{pid}_{condition}.csv", read = readr::read_csv2)
data.raw.questionnaire <- lazy_load(pattern = "StudyDataCSV/{*}/questionnaire_{pid}_{condition}.csv", read = readr::read_csv2)
data.pin <- data.raw.pin %>% mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
),
across(Input, \(x) str_replace_all(string=x, pattern = "-1|-2", replacement = "x")),
correct = PIN == Input,
tct = `End Time` - `Starting Time`
) %>%
rowwise() %>%
mutate(input_error_positions = list(compare_str(Input, PIN)),
input_errors = sum(input_error_positions == FALSE))
data.questionnaire <- data.raw.questionnaire %>%
mutate(condition = as.numeric(condition)) %>%
filter(condition < 15) %>%
mutate(
condition = as.numeric(condition),
size = case_when(
condition < 5 ~ "small",
condition < 10 ~ "medium",
condition < 15 ~ "large"
),
redirection = case_when(
condition %% 5 == 0 ~ "none",
condition %% 5 == 1 ~ "linear",
condition %% 5 == 2 ~ "ease-in",
condition %% 5 == 3 ~ "ease-out",
condition %% 5 == 4 ~ "shift",
)) %>%
pivot_wider(names_from = "Question", values_from = "Answer") %>%
mutate(
tlx_raw = rowSums(across(c(5:10))) * 5 / 6
)
##remove outlier
data.pin <- data.pin %>% filter(tct > 0)
data.model <- lazy_model(data.pin, participant = "pid", within.vars = c("redirection", "size"))
data.model.questionnaire <- lazy_model(data.questionnaire, participant = "pid", within.vars = c("redirection", "size"))
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
getwd()
setwd(path.cur)
devtools::load_all()
devtools::load_all()
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
data.pin.analysis.tlx <- lazy_analyze(data.model.questionnaire, dv = "tlx_raw", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
data.pin.analysis.tlx
##concerned
p.concerned <- lazy_plot(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", na.rm = TRUE, fun.error = se)
data.pin.analysis.q <- lazy_analyze(data.model.questionnaire, dv = "In a shared space, how concerned would you be that bystanders can guess your input?", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
data.pin.analysis.q
data.pin.analysis.q$post_hoc$`redirection:size`$interaction_plot
git status
devtools::document()
devtools::check()
data.pin.analysis.tct.art <- lazy_analyze(data.model, dv = "tct", analysis_type = "art")
data.pin.analysis.tct.art
##tct
p.tct <- lazy_plot(data.model, dv = "tct", fun.error = se, ivs = c("redirection", "size"))
p.tct
##tct
p.tct <- lazy_plot(data.model, dv = "tct", fun.error = se, ivs = c("redirection", "size"))
data.model
View(data.model)
View(data.pin)
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=5))
View(df)
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=10, min=1, max=20), nrow=5))
df <- as.data.frame(matrix(runif(n=60, min=1, max=20), nrow=10))
df <- as.data.frame(matrix(runif(n=60, min=1, max=20), nrow=10))
View(df)
df %>% mutate(dist = V1+V2)
df %>% mutate(dist =  sqrt((V1 - V4)^2 + (V2 - V5)^2 + (V3 - V6)^2) )
df %>% rowwise() %>% mutate(dist =  sqrt((V1 - V4)^2 + (V2 - V5)^2 + (V3 - V6)^2) )
df %>% select(V1, V2, V3)
df %>% select(V1, V2, V3) %>% pull()
df[,V1]
df[,1]
df[,2]
df[1,]
df[1,V1:V3]
df[1,]
df[1,c("name","gender")]
df[1,c("V1","V2")]
df[1,c("V1","V2", "V3")]
df[,1]
df
df[1,]
library(lazyhci)
library(dplyr)
library(readr)
library(lazyhci)
library(dplyr)
library(readr)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("karo.csv")
setwd(path.cur)
View(data.raw)
data.raw %>% mutate(pid = row_number())
data.karo <- data.raw %>% mutate(pid = row_number())
View(data.karo)
View(data.raw)
data.raw %>% pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "value"
)
data.raw %>%
mutate(pid = row_number()) %>%
pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "value"
)
data.karo <- data.raw %>%
mutate(pid = row_number()) %>%
pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "value"
)
data.raw %>% rename_with(~paste0("var", seq_along(.), sub("nameverybig_*", "_", .)), -1)
data.raw %>% rename_with(~paste0("var", seq_along(.), sub("non_timed*", "non", .)), -1)
library(lazyhci)
library(dplyr)
library(readr)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("karo.csv")
data.karo <- data.raw %>% mutate(pid = row_number())
data.karo <- data.raw %>%
mutate(pid = row_number()) %>%
pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "value"
)
setwd(path.cur)
View(data.karo)
data.model <- lazy_model(data.karo, participant = "pid", within.vars = c("timed", "content", "audience"))
data.model
data.karo <- data.raw %>%
mutate(pid = row_number()) %>%
pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "rating"
)
data.model <- lazy_model(data.karo, participant = "pid", within.vars = c("timed", "content", "audience"))
plot <- lazy_plot_likert(data.model, dv = "rating")
plot
View(data.karo)
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5")
plot
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("timed"))
plot
analysis.art <- lazy_analyze(data.model, dv = "rating", analysis_type = "art")
analysis.art <- lazy_analyze(data.model, dv = "rating", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
analysis.art
analysis.art$descriptives
analysis.art$post_hoc$`timed:content`$interaction_plot
analysis.art$post_hoc$`timed:audience`
analysis.art$post_hoc$`timed:audience`$interaction_plot
analysis.art$post_hoc$`content:audience`
analysis.art$post_hoc$`content:audience`$interaction_plot
analysis.art$post_hoc$`timed:content:audience`
analysis.art$post_hoc$`timed:content:audience`$interaction_plot
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("audience"))
plot
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("content"))
plot
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("audience"))
plot
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("timed"))
plot
