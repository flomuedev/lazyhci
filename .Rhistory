data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + theme_minimal(base_size = p.basesize)
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
lazy_plot <- function(lazy_model, dv, ivs = NULL, fun.sum = mean, fun.error = sd, p.scale_fill_manual = NULL, p.basesize = 10, p.title = NULL, theme.fontfamily = NULL, na.rm = FALSE, position = "dodge", collapse_trials = FALSE){
assert_lazy_model.internal(lazy_model)
checkmate::assert_function(fun.sum)
checkmate::assert_function(fun.error)
checkmate::assert_list(p.scale_fill_manual, null.ok = TRUE)
checkmate::assert_integerish(p.basesize)
checkmate::assert_string(p.title, null.ok = TRUE)
checkmate::assert_string(theme.fontfamily, null.ok = TRUE)
checkmate::assert_integer(length(c(lazy_model$widthin.vars, lazy_model$between.vars)), lower = 0, upper = 4)
assert_font_support.internal(fontfamily = theme.fontfamily)
assertable::assert_colnames(lazy_model$source$data, dv, only_colnames=FALSE)
checkmate::assert_character(ivs, null.ok = TRUE)
DV.pretty <- dv
dv <- janitor::make_clean_names(dv)
`%>%` <- dplyr::`%>%` #woa!
if(is.null(ivs)) {
IVs <- lazy_model$ivs
IVs.pretty <- c(lazy_model$source$within.vars, lazy_model$source$between.vars)
} else {
IVs.pretty <- ivs
IVs <- janitor::make_clean_names(ivs)
}
# start plotting
p<- NULL
data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + theme_minimal(base_size = p.basesize)
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
lazy_plot <- function(lazy_model, dv, ivs = NULL, fun.sum = mean, fun.error = sd, p.scale_fill_manual = NULL, p.basesize = 10, p.title = NULL, theme.fontfamily = NULL, na.rm = FALSE, position = "dodge", collapse_trials = FALSE){
assert_lazy_model.internal(lazy_model)
checkmate::assert_function(fun.sum)
checkmate::assert_function(fun.error)
checkmate::assert_list(p.scale_fill_manual, null.ok = TRUE)
checkmate::assert_integerish(p.basesize)
checkmate::assert_string(p.title, null.ok = TRUE)
checkmate::assert_string(theme.fontfamily, null.ok = TRUE)
checkmate::assert_integer(length(c(lazy_model$widthin.vars, lazy_model$between.vars)), lower = 0, upper = 4)
assert_font_support.internal(fontfamily = theme.fontfamily)
assertable::assert_colnames(lazy_model$source$data, dv, only_colnames=FALSE)
checkmate::assert_character(ivs, null.ok = TRUE)
DV.pretty <- dv
dv <- janitor::make_clean_names(dv)
`%>%` <- dplyr::`%>%` #woa!
if(is.null(ivs)) {
IVs <- lazy_model$ivs
IVs.pretty <- c(lazy_model$source$within.vars, lazy_model$source$between.vars)
} else {
IVs.pretty <- ivs
IVs <- janitor::make_clean_names(ivs)
}
# start plotting
p<- NULL
data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + theme_minimal(base_size = p.basesize)
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
lazy_plot <- function(lazy_model, dv, ivs = NULL, fun.sum = mean, fun.error = sd, p.scale_fill_manual = NULL, p.basesize = 10, p.title = NULL, theme.fontfamily = NULL, na.rm = FALSE, position = "dodge", collapse_trials = FALSE){
assert_lazy_model.internal(lazy_model)
checkmate::assert_function(fun.sum)
checkmate::assert_function(fun.error)
checkmate::assert_list(p.scale_fill_manual, null.ok = TRUE)
checkmate::assert_integerish(p.basesize)
checkmate::assert_string(p.title, null.ok = TRUE)
checkmate::assert_string(theme.fontfamily, null.ok = TRUE)
checkmate::assert_integer(length(c(lazy_model$widthin.vars, lazy_model$between.vars)), lower = 0, upper = 4)
assert_font_support.internal(fontfamily = theme.fontfamily)
assertable::assert_colnames(lazy_model$source$data, dv, only_colnames=FALSE)
checkmate::assert_character(ivs, null.ok = TRUE)
DV.pretty <- dv
dv <- janitor::make_clean_names(dv)
`%>%` <- dplyr::`%>%` #woa!
if(is.null(ivs)) {
IVs <- lazy_model$ivs
IVs.pretty <- c(lazy_model$source$within.vars, lazy_model$source$between.vars)
} else {
IVs.pretty <- ivs
IVs <- janitor::make_clean_names(ivs)
}
# start plotting
p<- NULL
data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + ggplot2::theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + ggplot2::theme_minimal(base_size = p.basesize)
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
lazy_plot <- function(lazy_model, dv, ivs = NULL, fun.sum = mean, fun.error = sd, p.scale_fill_manual = NULL, p.basesize = 10, p.title = NULL, theme.fontfamily = NULL, na.rm = FALSE, position = "dodge", collapse_trials = FALSE){
assert_lazy_model.internal(lazy_model)
checkmate::assert_function(fun.sum)
checkmate::assert_function(fun.error)
checkmate::assert_list(p.scale_fill_manual, null.ok = TRUE)
checkmate::assert_integerish(p.basesize)
checkmate::assert_string(p.title, null.ok = TRUE)
checkmate::assert_string(theme.fontfamily, null.ok = TRUE)
checkmate::assert_integer(length(c(lazy_model$widthin.vars, lazy_model$between.vars)), lower = 0, upper = 4)
assert_font_support.internal(fontfamily = theme.fontfamily)
assertable::assert_colnames(lazy_model$source$data, dv, only_colnames=FALSE)
checkmate::assert_character(ivs, null.ok = TRUE)
DV.pretty <- dv
dv <- janitor::make_clean_names(dv)
`%>%` <- dplyr::`%>%` #woa!
if(is.null(ivs)) {
IVs <- lazy_model$ivs
IVs.pretty <- c(lazy_model$source$within.vars, lazy_model$source$between.vars)
} else {
IVs.pretty <- ivs
IVs <- janitor::make_clean_names(ivs)
}
# start plotting
p<- NULL
data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + ggplot2::theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + ggplot2::theme_minimal(base_size = p.basesize)
p <- p + ggplot2::theme(plot.title = element_text(hjust = 0.5)) + ggplot2::theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggplot2::ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
lazy_plot <- function(lazy_model, dv, ivs = NULL, fun.sum = mean, fun.error = sd, p.scale_fill_manual = NULL, p.basesize = 10, p.title = NULL, theme.fontfamily = NULL, na.rm = FALSE, position = "dodge", collapse_trials = FALSE){
assert_lazy_model.internal(lazy_model)
checkmate::assert_function(fun.sum)
checkmate::assert_function(fun.error)
checkmate::assert_list(p.scale_fill_manual, null.ok = TRUE)
checkmate::assert_integerish(p.basesize)
checkmate::assert_string(p.title, null.ok = TRUE)
checkmate::assert_string(theme.fontfamily, null.ok = TRUE)
checkmate::assert_integer(length(c(lazy_model$widthin.vars, lazy_model$between.vars)), lower = 0, upper = 4)
assert_font_support.internal(fontfamily = theme.fontfamily)
assertable::assert_colnames(lazy_model$source$data, dv, only_colnames=FALSE)
checkmate::assert_character(ivs, null.ok = TRUE)
DV.pretty <- dv
dv <- janitor::make_clean_names(dv)
`%>%` <- dplyr::`%>%` #woa!
if(is.null(ivs)) {
IVs <- lazy_model$ivs
IVs.pretty <- c(lazy_model$source$within.vars, lazy_model$source$between.vars)
} else {
IVs.pretty <- ivs
IVs <- janitor::make_clean_names(ivs)
}
# start plotting
p<- NULL
data.plot <- lazy_model$data
if(collapse_trials) {
data.plot <- data.plot %>%
dplyr::group_by(across(all_of(c(IVs, lazy_model$participant)))) %>%
dplyr::summarise(
!!dv := fun.sum(!!as.name(dv), na.rm = na.rm),
)
}
data.plot <-  data.plot %>%
dplyr::group_by(across(all_of(c(IVs)))) %>%
dplyr::summarise(
mean = fun.sum(!!as.name(dv), na.rm = na.rm),
error = fun.error(!!as.name(dv), na.rm = na.rm)
)
if(length(IVs) == 1)
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[1])) + ggplot2::xlab(IVs.pretty[1])
else
p<- ggplot2::ggplot(data.plot, ggplot2::aes_string(x=IVs[1], y="mean", fill=IVs[2])) + ggplot2::xlab(IVs.pretty[1]) + ggplot2::labs(fill = IVs.pretty[2])
if(!is.null(p.scale_fill_manual))
p <- p + scale_fill_manual(values = p.scale_fill_manual)
if(position == "dodge") {
p <- p + ggplot2::geom_bar(stat="identity",
position=ggplot2::position_dodge(preserve = "single")) +
ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
} else if(position == "stack") {
p <- p + ggplot2::geom_bar(stat="identity",
position="stack") +
#     ggplot2::geom_errorbar(ggplot2::aes(ymin=mean-error, ymax=mean+error), width = 0.2,
#                   position = ggplot2::position_dodge(width = 0.9, preserve = "single"))  +
ggplot2::ylab(DV.pretty)
}
if(length(IVs) == 3) {
p <- p + facet_wrap(as.formula(paste("~", IVs[3])))
}
if(length(IVs) == 4) {
p <- p + facet_grid(as.formula(paste(IVs[3], "~", IVs[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + ggplot2::theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + ggplot2::theme_minimal(base_size = p.basesize)
p <- p + ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5)) + ggplot2::theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggplot2::ggtitle(p.title)
}
return(p)
}
assert_font_support.internal <- function(fontfamily) {
if(is.null(fontfamily))
return()
if(is.null(extrafont::fonts()))
extrafont::loadfonts()
result <- fontfamily %in% extrafont::fonts()
if(!result)
stop(paste0("Sorry, could not load font family ", fontfamily, ". Check spelling or run font_import() if using this the first time. If you get 'No FontName. Skipping' during font_import(), try https://stackoverflow.com/questions/61204259/how-can-i-resolve-the-no-font-name-issue-when-importing-fonts-into-r-using-ext/68642855#68642855"))
warning("You are plotting using a custom font. When exporting to PDF, make sure to use ggsave with device = cairo_pdf for the fonts to be automatically embedded.")
}
demo1  <- read.csv("https://stats.idre.ucla.edu/stat/data/demo1.csv")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group")
lazy_plot(demo1.model, dv="pulse")
demo1.model <- lazy_model(demo1, participant = "id", within.vars = "time", between.vars = "group", make_factor = TRUE)
lazy_plot(demo1.model, dv="pulse")
devtools::document()
dir
ls()
getwd()
library(installr)
install.packages("installr")
library(installr)
install.packages("rlang")
install.packages("rlang")
devtools::document()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
