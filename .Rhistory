devtools::load_all()
demo2.ana
devtools::load_all()
demo2.ana
devtools::load_all()
demo2.ana
t <- "asd"
1
1
t
demo2.ana$post_hoc$time
demo2.ana$post_hoc$time$`pairwise differences of time`
dat <- demo2.ana$post_hoc$time
dat
print(dat[grep("pairwise", names(dat))])
print(dat[grep("pairwise", names(dat))])[1]
print(dat[grep("pairwise", names(dat))])[[1]]
print(dat[grep("pairwise", names(dat))])
dat[grep("pairwise", names(dat))]
dat$pairwise
devtools::load_all()
demo2.ana
demo1.ana
demo1.ana
demo2.ana$model$anova_table$`Pr(>F)`
demo2.ana$model$anova_table %>%
asd
demo2.ana$model$anova_table %>% dplyr::select('Pr(>F)' <0.05)
demo2.ana$model$anova_table %>% dplyr::filter('Pr(>F)' <0.05)
demo2.ana$model$anova_table %>% dplyr::filter('Pr(>F)' <0.5)
demo2.ana$model$anova_table
demo2.ana$model$anova_table %>% dplyr::filter('Pr(>F)' >0.5)
demo2.ana$model$anova_table %>% dplyr::filter('Pr(>F)' < 0.5)
rownames(demo2.model$anova_table)
demo2.model$anova_table
rownames(demo2.ana$model$anova_table)
demo2.ana$model$anova_table
names(demo2.ana$model$anova_table)
demo2.ana$model$anova_table$`Pr(>F)`
demo2.ana$model$anova_table$`Pr(>F)` < 0.05
demo2.ana$model$anova_table$`Pr(>F)` < 0.0
demo2.ana$model$anova_table %>% dplyr::filter(`Pr(>F)` < 0.05)
rownames(demo2.ana$model$anova_table %>% dplyr::filter(`Pr(>F)` < 0.05))
devtools::load_all()
demo2.ana <- lazy_analyze2(demo2.model, "ACC")
demo2.ana
demo1.ana <- lazy_analyze2(demo1.model, "pulse")
demo1.ana
demo1.ana$model
demo1.ana$model$anova_table
demo1.ana$model$Anova
demo1
demo1.model
demo1.ana$model$anova_table
demo1.ana$model$Anova
summary(demo1.ana$model)
demo1.ana
devtools::load_all()
demo2.ana <- lazy_analyze2(demo2.model, dv = "ACC")
lazy_latex(demo2.ana)
View(demo2.ana)
devtools::load_all()
demo2.ana <- lazy_analyze2(demo2.model, dv = "ACC")
lazy_latex(demo2.ana)
devtools::load_all()
demo2.ana <- lazy_analyze2(demo2.model, dv = "ACC")
lazy_latex(demo2.ana)
devtools::load_all()
devtools::load_all()
lazy_latex(demo2.ana)
devtools::load_all()
lazy_latex(demo2.ana)
demo2.ana$model$anova_table
devtools::load_all()
demo2.ana <- lazy_analyze2(demo2.model, dv = "ACC")
lazy_latex(demo2.ana)
demo2.ana <- lazy_analyze2(demo2.model, dv = "ACC")
devtools::load_all()
lazy_latex(demo2.ana)
lazy_load("C:/Users/ra46sin/OneDrive/Uni/paper/2022/raw/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/paper/2022/raw/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}")
install.packages("gtools")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/paper/2022/raw/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}")
lazy_load("C:/Users/ra46sin/OneDrive/Uni/paper/2022/raw/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q<- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
str_replace(q, "{day}", "-")
stringr::str_replace(q, "{day}", "-")
stringr::str_replace(q, "\{day\}", "-")
stringr::str_replace(q, "\\{day\\}", "-")
stringr::str_replace(q, "\\{*\\}", "-")
stringr::str_replace(q, "\\{{*}\\}", "-")
stringr::str_replace(q, "\{[^}]*\}", "-")
stringr::str_replace(q, "\\{[^}]*\\}", "-")
q<- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q
stringr::str_replace(q, "\\{[^}]*\\}", "-")
stringr::str_replace(q, "[^}]*\\{[^}]*\\}", "-")
stringr::str_replace(q, "[^}]*\\{[^}]*\\[^}]*}", "-")
gsub(pattern = "[{]|[}]", replacement = "_foo_", x="CoinLog_ID_-_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{]|[}]", replacement = "*", x="CoinLog_ID_-_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{]|[}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][^][}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][:print:][}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][^][}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][^]*[}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][^*][}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][pa][}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{][^]*[}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "[{]|[}]", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
gsub(pattern = "\\{[^}]*\\}", replacement = "*", x="CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
q<- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/", glob="day*/CoinLog_ID_*_*_*_*.csv")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*/CoinLog_ID_*_*_*_*.csv")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*/*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmpTtestdata")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*", recurse = 5)
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*", recurse = TRUE)
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="day*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="*/day*")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="*/day*/CoinLog_ID_*_*_*_*.csv")
fs::dir_ls(path="C:/Users/ra46sin/OneDrive/Uni/tmp/testdata", glob="*/day*/CoinLog_ID_*_*_*_*.csv", recurse = TRUE)
which(grepl(q, "*"))[1]
which(grepl(q, "tmp"))[1]
q
grepl("*", "asd" fixed = TRUE)
grepl("*", "asd", fixed = TRUE)
grepl("*", "asd*", fixed = TRUE)
which(grepl("*", q, fixed = TRUE))[1]
which(grepl("*", q, fixed = TRUE))
which(grepl("*", q, fixed = TRUE))q[1]
q[1-3]
q[1:3]
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
length(q)
q[3-1:length(q)]
q[1:length(q)]
q[3-1:9]
q[2:9]
q[3-1:length(q)]
q[3:length(q)]
tail(q,5)
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
t <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
stringr::str_extract_all(string = t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}")
stringr::str_extract_all(string = t, pattern = "day{day}/CoinLog")
stringr::str_extract_all(string = t, pattern = "[:alnum:]")
stringr::str_extract_all(string = t, pattern = "[:alnum:]*")
stringr::str_extract_all(string = t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[:alnum:]/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}")
stringr::str_extract_all(string = t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[:alnum:]/CoinLog_ID_[:alnum:]_[:alnum:]_[:alnum:]_[:alnum:].csv")
stringr::str_extract_all(string = t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[:alnum:]+/CoinLog_ID_[:alnum:]+_[:alnum:]+_[:alnum:+]_[:alnum:]+.csv")
t <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/asd"
stringr::str_extract_all(t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/asd")
stringr::str_extract_all(t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[1]/asd")
stringr::str_extract_all(t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[:alnum:]/asd")
t <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day11/asd"
stringr::str_extract_all(t, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[:alnum:]+/asd")
path.parts
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q
q <- " C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv"
q1 <- stringr::str_split_1(q)
q1 <- stringr::str_split_1(q, pattern = "/")
devtools::load_all()
q2 <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
View(q2)
q2[,1]
q2[1,]
q2[1,]$path
p <- q2[1,]$path
p
stringr::str_locate(p, "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day")
stringr::str_locate(p, "/CoinLog_ID_")
stringr::str_extract_all(q, pattern = "\\{[:alnum:]+\\}")
stringr::str_extract_all(q, pattern = "\\{[:alnum:]+\\}", simplify = TRUE)
w <- stringr::str_extract_all(q, pattern = "\\{[:alnum:]+\\}", simplify = TRUE)
unlist(w)
w[1]
w[2]
w[3]
p
q
w <- stringr::str_extract_all(q, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_[ -~]*_[ -~]*_[ -~]*_[ -~]*.csv", simplify = TRUE)
w
w <- stringr::str_extract_all(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_[ -~]*_[ -~]*_[ -~]*_[ -~]*.csv", simplify = TRUE)
w
w <- stringr::str_detect(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_[ -~]*_[ -~]*_[ -~]*_[ -~]*.csv", simplify = TRUE)
w <- stringr::str_detect(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_[ -~]*_[ -~]*_[ -~]*_[ -~]*.csv")
w
w <- stringr::str_detect(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_")
stringr::str_detect(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_")
stringr::str_extract(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*/CoinLog_ID_")
stringr::str_extract(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*?/CoinLog_ID_")
stringr::str_match(p, pattern = "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day[ -~]*?/CoinLog_ID_")
stringr::str_match(p, pattern = ".*day[ -~]*?/CoinLog_ID_")
p
devtools::load_all()
q2 <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q2$path[1]
devtools::load_all()
devtools::load_all()
q2$path[1]
q2 <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
p
stringr::str_match_all(p, "\\{(.*?)\\}")
p
matches <- stringr::str_match_all(p, "\\{(.*?)\\}")[[1]]
matches <- stringr::str_match_all(p, "\\{([^\\s}]+)\\}")[[1]]
pattern <- "\\{(.*?)\\}"
# Find all matches of the pattern in the string
matches <- regmatches(string, gregexpr(pattern, string, perl = TRUE)
)
string <- p
pattern <- "\\{(.*?)\\}"
# Find all matches of the pattern in the string
matches <- regmatches(string, gregexpr(pattern, string, perl = TRUE))
View(matches)
string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression pattern to match the contents inside curly brackets
pattern <- "\\{(.*?)\\}"
# Find all matches of the pattern in the string
matches <- regmatches(string, gregexpr(pattern, string, perl = TRUE))
string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression pattern to match the contents inside curly brackets
pattern <- "\\{(.*?)\\}"
# Find all matches of the pattern in the string
matches <- regmatches(string, gregexpr(pattern, string, perl = TRUE))
parts <- gsub("[{}]", "", unlist(matches))
# Print the extracted parts
print(parts)
# Define the input string
input_string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression to match the pattern in curly braces
regex_pattern <- "\\{(.*?)\\}"
# Extract all the parts within the curly braces using the regular expression
extracted_parts <- regmatches(input_string, gregexpr(regex_pattern, input_string))[[1]]
# Remove the curly braces from each part
extracted_parts <- gsub("[{}]", "", extracted_parts)
# Print the extracted parts
print(extracted_parts)
# Define the input string
input_string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression to match the pattern in curly braces
regex_pattern <- "\\{([[:print:]]+)\\}"
# Extract all the parts within the curly braces using the regular expression
extracted_parts <- regmatches(input_string, gregexpr(regex_pattern, input_string))[[1]]
stringr::str_match_all(p, pattern = "\\{([[:print:]]+)\\}")
stringr::str_match_all(asd{as}dsa, pattern = "\\{([[:print:]]+)\\}")
stringr::str_match_all(asd{as}dsa, pattern = "\\{[^}]*\\")
stringr::str_match_all(p, pattern = "\\{[^}]*\\")
stringr::str_match_all(p, pattern = "\{[^}]*\")
# Define the input string
input_string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression to match the pattern in curly braces
regex_pattern <- "\\{[^}]*\\"
# Extract all the parts within the curly braces using the regular expression
extracted_parts <- regmatches(input_string, gregexpr(regex_pattern, input_string))[[1]]
# Define the input string
input_string <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Define a regular expression to match the pattern in curly braces
regex_pattern <- "\\{[^}]*\\}"
# Extract all the parts within the curly braces using the regular expression
extracted_parts <- regmatches(input_string, gregexpr(regex_pattern, input_string))[[1]]
# Remove the curly braces from each part
extracted_parts <- gsub("[{}]", "", extracted_parts)
# Print the extracted parts
print(extracted_parts)
p
# Define the template string
template <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv"
# Define the regular expression pattern to extract the values
pattern <- "\\{(.*?)\\}"
# Extract the parts in curly brackets using the regular expression
matches <- regmatches(template, gregexpr(pattern, template))[[1]]
# Extract the values from the actual data string
actual_data <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
values <- regmatches(actual_data, gregexpr(paste0(pattern, collapse="|"), actual_data))[[1]]
# Print the extracted values
print(values)
# Define the template string
template <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv"
# Define the regular expression pattern to extract the values
pattern <- "\\{(.*?)\\}"
# Extract the parts in curly brackets using the regular expression
matches <- regmatches(template, gregexpr(pattern, template))[[1]]
# Extract the values from the actual data string
actual_data <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
values <- regmatches(actual_data, gregexpr(paste0(pattern, collapse="|"), actual_data))[[1]]
paste0(pattern, collapse="|")
q
p
template <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv"
data <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(stringr::str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Construct a regular expression pattern to extract the variable values from the data
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(str_match(data, regex)[-1])
# Extract the variable values using the regular expression pattern
variable_values <- unlist(stringr::str_match(data, regex)[-1])
# Combine the variable names and values into a named list
result <- setNames(variable_values, variable_names)
# Construct a regular expression pattern to extract the variable values from the data
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^_/]*)", template)
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(stringr::str_match(data, regex)[-1])
# Construct a regular expression pattern to extract the variable values from the data
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(stringr::str_match(data, regex)[-1])
template <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{YEAR}_{TIME}_{VISUALIZATION}_{CONDITION}.csv"
data <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv"
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(stringr::str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Construct a regular expression pattern to extract the variable values from the data
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(stringr::str_match(data, regex)[-1])
# Combine the variable names and values into a named list
result <- setNames(variable_values, variable_names)
result
template <- "C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv"
# Create a sample dataframe with a column of strings that match the template
df <- data.frame(strings = c("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day1/CoinLog_ID_1_2022-08-03_09-22-58_DISCRETE_NOUNDO.csv",
"C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day2/CoinLog_ID_2_2022-08-04_12-01-33_CONTINUOUS_NOUNDO.csv",
"C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day3/CoinLog_ID_3_2022-08-05_14-29-12_DISCRETE_DO.csv"))
# Create a function that extracts the variables from a string using the template
extract_variables <- function(string, template) {
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Construct a regular expression pattern to extract the variable values from the string
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
pattern <- gsub("\\{DATE\\}", "([^_/]*)", pattern) # Modify DATE variable pattern to include underscore
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(str_match(string, regex)[-1])
# Combine the variable names and values into a named list
setNames(variable_values, variable_names)
}
# Use the extract_variables function to create new columns for each variable
df <- df %>%
rowwise() %>%
mutate(variables = list(extract_variables(strings, template))) %>%
unnest_wider(variables)
# Use the extract_variables function to create new columns for each variable
df <- df %>%
dplyr::rowwise() %>%
dplyr::mutate(variables = list(extract_variables(strings, template))) %>%
dplyr::unnest_wider(variables)
# Use the extract_variables function to create new columns for each variable
df <- df %>%
dplyr::rowwise() %>%
dplyr::mutate(variables = list(extract_variables(strings, template))) %>%
tidyr::unnest_wider(variables)
# Create a function that extracts the variables from a string using the template
extract_variables <- function(string, template) {
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(stringr::str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Construct a regular expression pattern to extract the variable values from the string
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
pattern <- gsub("\\{DATE\\}", "([^_/]*)", pattern) # Modify DATE variable pattern to include underscore
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(str_match(string, regex)[-1])
# Combine the variable names and values into a named list
setNames(variable_values, variable_names)
}
# Use the extract_variables function to create new columns for each variable
df <- df %>%
dplyr::rowwise() %>%
dplyr::mutate(variables = list(extract_variables(strings, template))) %>%
tidyr::unnest_wider(variables)
# Create a function that extracts the variables from a string using the template
extract_variables <- function(string, template) {
# Extract the variable names from the template using a regular expression
variable_names <- gsub("\\{([^\\{\\}]*)\\}", "\\1", unlist(stringr::str_extract_all(template, "\\{([^\\{\\}]*)\\}")))
# Construct a regular expression pattern to extract the variable values from the string
pattern <- gsub("\\{[^\\{\\}]*\\}", "([^/]*)", template)
pattern <- gsub("\\{DATE\\}", "([^_/]*)", pattern) # Modify DATE variable pattern to include underscore
regex <- paste0("^", pattern, "$")
# Extract the variable values using the regular expression pattern
variable_values <- unlist(stringr::str_match(string, regex)[-1])
# Combine the variable names and values into a named list
setNames(variable_values, variable_names)
}
# Use the extract_variables function to create new columns for each variable
df <- df %>%
dplyr::rowwise() %>%
dplyr::mutate(variables = list(extract_variables(strings, template))) %>%
tidyr::unnest_wider(variables)
# View the resulting dataframe
df
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{DATE}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*DATE}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
variable_names[!grepl("\\*", variable_names)]
variable_names
variable_names <- c(variable_names, "*")
variable_names
variable_names[!grepl("\\*", variable_names)]
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
variable_values
variable_names
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
res
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
res
which(names(res) %in% c("*"))
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
t <- res
res
t[t != "*"]
t %>% purrr::list_modify("*" = NULL)
t[! names(t) %in% c('*')]
devtools::load_all()
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{day}/CoinLog_ID_{participant}_{*}_{TIME}_{*}_{CONDITION}.csv")
View(q)
q <- lazy_load("C:/Users/ra46sin/OneDrive/Uni/tmp/testdata/day{*}/CoinLog_ID_{participant}_{*}_{TIME}_{*}_{CONDITION}.csv")
devtools::document()
devtools::load_all()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data.raw <- lazy_load("raw/CoinLog_ID_{participant}_{DATE}_{TIME}_{VISUALIZATION}_{CONDITION}.csv")
View(data.raw)
data.raw <- lazy_load("raw/CoinLog_ID_{participant}_{*}_{*}_{VISUALIZATION}_{CONDITION}.csv")
View(data.raw)
devtools::load_all()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- lazy_load("raw/CoinLog_ID_{participant}_{*}_{*}_{VISUALIZATION}_{CONDITION}.csv")
View(data.raw)
devtools::document()
