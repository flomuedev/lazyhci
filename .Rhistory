p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs, p.basesize = plot.size, theme.fontfamily = plots.font.family, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs) #, p.scale_fill_manual = colorscale)
p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
rlang::last_trace()
data.model
devtools::load_all()
p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
data.plot
q
Q
Q
devtools::load_all()
p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
devtools::load_all()
p.plot <- lazy_plot_likert(data.model, measure, grouping = ivs, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q)
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = !!as.name(Q), names_sep = " | ")
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
View(data.plot)
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = "Q", names_sep = " | ")
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
p.plot <- lazy_plot_likert(data.model, measure, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
p.plot <- lazy_plot_likert(data.model, measure, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
devtools::load_all()
p.plot <- lazy_plot_likert(data.model, measure, survey_vector = "likert-7") #, p.scale_fill_manual = colorscale)
ata.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
data.model
library(dplyr)
data.likert <- data.plot %>%
dplyr::select(lazy_model$source$participant,grouping,drop,IVs.rest, Q) %>%
tidyr::pivot_wider(names_from = IVs.rest, values_from = Q, names_sep = " | ")
data.filtered1 %>% group_by("profile") %>% mutate(rep = row_number())
data.filtered1 <- data.filtered1 %>% group_by("profile") %>% mutate(rep = row_number())
View(data.filtered1)
data.filtered1 <- data.filtered1 %>% group_by(profile) %>% mutate(rep = row_number())
View(data.filtered1)
data.filtered1 <- data.filtered1 %>% group_by(id, profile) %>% mutate(rep = row_number())
data.filtered1 <- data.filtered1 %>% group_by(ID, profile) %>% mutate(rep = row_number())
data.filtered1 <- data.filtered1 %>% group_by(ID, profile) %>% mutate(rep = row_number())
data.filtered1
data.model <- lazy_model(data = data.filtered1, participant = "ID", within.vars = ivs)
ivs = c("profile", "rep")
data.filtered1 <- data.filtered1 %>% group_by(ID, profile) %>% mutate(rep = row_number())
data.model <- lazy_model(data = data.filtered1, participant = "ID", within.vars = ivs)
data.model
p.plot <- lazy_plot_likert(data.model, measure, survey_vector = "likert-7", drop = "rep"), #, p.scale_fill_manual = colorscale)
p.plot <- lazy_plot_likert(data.model, measure, survey_vector = "likert-7", drop = "rep") #, p.scale_fill_manual = colorscale)
p.plot
p.plot <- lazy_plot_likert(data.model, measure, drop = "rep") #, p.scale_fill_manual = colorscale)
data.model
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 5, post_questions = 3, nr_of_conditions = 4, participant_column = 2, verbose = TRUE)
rlang::last_trace()
devtools::load_all()
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 5, post_questions = 3, nr_of_conditions = 4, participant_column = 2, verbose = TRUE)
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 4, post_questions = 3, nr_of_conditions = 4, participant_column = 2, verbose = TRUE)
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2, verbose = TRUE)
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2, verbose = TRUE)
View(data.forms)
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 5, post_questions = 3, nr_of_conditions = 4, participant_column = 2)
data.forms <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2)
View(data.model)
View(data.forms)
df <- data.forms$main
View(df)
data.conditions <- data.forms$main %>% separate_wider_delim(x, ".", names = c("A", "B"))
library(tidyr)
data.conditions <- data.forms$main %>% separate_wider_delim(x, ".", names = c("A", "B"))
data.conditions <- data.forms$main %>% separate_wider_delim(condition, ",", names = c("A", "B"))
View(df)
data.conditions <- data.forms$main %>% separate_wider_delim(condition_7, ",", names = c("A", "B"))
View(data.conditions)
data.forms.complete <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2)
data.forms.complete <- data.forms.complete %>% separate_wider_delim(condition_7, ",", names = c("directness", "manipulation"))
data.forms.complete <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2)
data.forms.complete <- data.forms.complete$main %>% separate_wider_delim(condition_7, ",", names = c("directness", "manipulation"))
data.forms.mainpart <- data.forms.complete$main %>% separate_wider_delim(condition_7, ",", names = c("directness", "manipulation"))
data.forms.complete <- lazy_import_google_form(url = "https://docs.google.com/spreadsheets/d/1OaGzCiCV0-qahktiJPcP8kLtLw8rjseSk4iI8OP5Ubo/edit?usp=sharing", pre_questions = 6, post_questions = 3, nr_of_conditions = 4, participant_column = 2)
data.forms.mainpart <- data.forms.complete$main %>% separate_wider_delim(condition_7, ",", names = c("directness", "manipulation"))
data.forms.mainpart
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("Polite agents (All data).xlsx")
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("Polite agents (All data).xlsx")
getwd()
data.raw <- read_excel("data.xlsx")
View(data.raw)
View(data.model)
View(data.raw)
colnames(data.raw)[75] <- "Agent"
colnames(data.raw)[76] <- "Behavior"
colnames(data.raw)[77] <- "Understanding"
colnames(data.raw)[78] <- "Offence"
colnames(data.raw)[79] <- "Intimacy"
colnames(data.raw)[80] <- "Respect"
data.raw$PID <- as.factor(data.raw$PID)
data.raw$Agent <- as.factor(data.raw$Agent)
data.raw$Behavior <- as.factor(data.raw$Behavior)
data.raw$Understanding <- as.numeric(data.raw$Understanding)
data.raw$Offence <- as.numeric(data.raw$Offence)
data.raw$Intimacy <- as.numeric(data.raw$Intimacy)
data.raw$Respect <- as.numeric(data.raw$Respect)
colnames(data.raw)[84] <- "Path Duration, sec"
measure <- aggregate(data.raw[,"Path Duration, sec"], by=list(data.raw$Agent, data.raw$Behavior, data.raw$PID), mean,Â na.action=NULL)
measure <- aggregate(data.raw[,"Path Duration, sec"], by=list(data.raw$Agent, data.raw$Behavior, data.raw$PID), mean, na.action=NULL)
View(measure)
data.raw$Behavior
data.raw$Behavior
View(data.raw)
data.raw <- read_excel("data.xlsx")
library(readr)
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("data.xlsx")
View(data.raw)
data.raw
colnames(data.raw)[75]
colnames(data.raw)[76]
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("data.xlsx")
View(data.raw)
colnames(data.raw)[75]
bei mdata.raw[75]
data.raw[75]
View(data.raw)
library(readr)
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("data.xlsx")
colnames(data.raw)[75] <- "Agent"
colnames(data.raw)[76] <- "Behavior"
colnames(data.raw)[77] <- "Understanding"
colnames(data.raw)[78] <- "Offence"
colnames(data.raw)[79] <- "Intimacy"
colnames(data.raw)[80] <- "Respect"
data.raw$PID <- as.factor(data.raw$PID)
data.raw$Agent <- as.factor(data.raw$Agent)
data.raw$Behavior <- as.factor(data.raw$Behavior)
data.raw$Understanding <- as.numeric(data.raw$Understanding)
data.raw$Offence <- as.numeric(data.raw$Offence)
data.raw$Intimacy <- as.numeric(data.raw$Intimacy)
data.raw$Respect <- as.numeric(data.raw$Respect)
data.raw$Behavior
data.raw$Understanding
data.raw$PID <- as.factor(data.raw$PID)
data.raw$Agent <- as.factor(data.raw$Agent)
data.raw$Behavior <- as.factor(data.raw$Behavior)
data.raw$Understanding <- as.numeric(data.raw$Understanding)
data.raw$Offence <- as.numeric(data.raw$Offence)
data.raw$Intimacy <- as.numeric(data.raw$Intimacy)
data.raw$Respect <- as.numeric(data.raw$Respect)
colnames(data.raw)[84] <- "Path Duration, sec"
measure <- aggregate(data.raw[,"Path Duration, sec"], by=list(data.raw$Agent, data.raw$Behavior, data.raw$PID), mean, na.action=NULL)
measure
View(measure)
View(data.raw)
data.raw %>% filter(Behavior == "IND")
data.raw %>% filter(Behavior == "IND")
data.raw$Behavior
data.raw %>% group_by(Agent, Behavior, PID) %>%
summarise(mean = mean(`Path Duration, sec`))
m <- data.raw %>% group_by(Agent, Behavior, PID) %>%
summarise(mean = mean(`Path Duration, sec`))
View(m)
m <- data.raw %>% group_by(Agent, Behavior, PID) %>%
summarise(mean = mean(`Path Duration, sec`), n = n())
View(m)
View(data.raw)
View(data.raw)
View(data.raw)
data.raw %>% mutate(
pid_fixed <- if_else(is.na(PID, lag(PID), PID))
)
data.raw %>% mutate(
pid_fixed <- if_else(is.na(PID), lag(PID), PID)
)
data.raw <- data.raw %>% mutate(
pid_fixed <- if_else(is.na(PID), lag(PID), PID)
)
View(data.raw)
data.raw <- data.raw %>% mutate(
pid_fixed <- if_else(is.na(PID), lag(PID), PID)
) %>% select(PID, pid_fixed)
data.raw <- data.raw %>% mutate(
pid_fixed = if_else(is.na(PID), lag(PID), PID)
) %>% select(PID, pid_fixed)
View(data.raw)
data.raw <- data.raw %>%
fill(PID)
View(data.raw)
library(readr)
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("data.xlsx")
colnames(data.raw)[75] <- "Agent"
colnames(data.raw)[76] <- "Behavior"
colnames(data.raw)[77] <- "Understanding"
colnames(data.raw)[78] <- "Offence"
colnames(data.raw)[79] <- "Intimacy"
colnames(data.raw)[80] <- "Respect"
data.raw$PID <- as.factor(data.raw$PID)
data.raw$Agent <- as.factor(data.raw$Agent)
data.raw$Understanding <- as.numeric(data.raw$Understanding)
data.raw$Intimacy <- as.numeric(data.raw$Intimacy)
data.raw$Respect <- as.numeric(data.raw$Respect)
data.raw <- data.raw %>%
fill(PID)
library(readr)
library(readxl)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_excel("data.xlsx")
colnames(data.raw)[75] <- "Agent"
colnames(data.raw)[76] <- "Behavior"
colnames(data.raw)[77] <- "Understanding"
colnames(data.raw)[78] <- "Offence"
colnames(data.raw)[79] <- "Intimacy"
colnames(data.raw)[80] <- "Respect"
data.raw$PID <- as.factor(data.raw$PID)
data.raw$Agent <- as.factor(data.raw$Agent)
data.raw$Behavior <- as.factor(data.raw$Behavior)
data.raw$Understanding <- as.numeric(data.raw$Understanding)
data.raw$Offence <- as.numeric(data.raw$Offence)
data.raw$Intimacy <- as.numeric(data.raw$Intimacy)
data.raw$Respect <- as.numeric(data.raw$Respect)
View(data.raw)
data.raw <- data.raw %>%
fill(PID)
colnames(data.raw)[84] <- "Path Duration, sec"
measure <- aggregate(data.raw[,"Path Duration, sec"], by=list(data.raw$Agent, data.raw$Behavior, data.raw$PID), mean, na.action=NULL)
View(measure)
measure <- aggregate(data.raw[,"Path Duration, sec"], by=list(data.raw$Agent, data.raw$Behavior, data.raw$PID), mean, na.action=NULL)
measure
measure$Group.2
library(dplyr)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.filtered1 = read.csv("filtered1.csv")
ivs = c("profile", "rep")
data.filtered1 <- data.filtered1 %>% group_by(ID, profile) %>% mutate(rep = row_number())
data.model <- lazy_model(data = data.filtered1, participant = "ID", within.vars = c("profile", "rep"))
measure = "detection_confidence"
library(lazyhci)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.filtered1 = read.csv("filtered1.csv")
ivs = c("profile", "rep")
devtools::load_all()
library(dplyr)
library(readr)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("karo_invert.csv")
data.karo <- data.raw %>%
mutate(pid = row_number()) %>%
pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "rating"
)
data.karo <- data.raw %>%
mutate(pid = row_number()) %>%
tidyr::pivot_longer(
cols = 1:18,
names_to = c("timed", "content", "audience"),
names_sep = "_",
values_to = "rating"
)
data.model <- lazy_model(data.karo, participant = "pid", within.vars = c("timed", "content", "audience"))
data.model
plot <- lazy_plot_likert(data.model, dv = "rating", survey_vector = "likert-5", grouping = c("timed"))
plot
analysis.art <- lazy_analyze(data.model, dv = "rating", analysis_type = "art", na.rm = TRUE, remove.incomplete = TRUE)
analysis.art
analysis.art$post_hoc$`timed:content`
analysis.art$post_hoc$`timed:content`$interaction_plot
analysis.art$post_hoc$`timed:audience`
analysis.art$post_hoc$`timed:audience`$interaction_plot
analysis.art$post_hoc$`content:audience`
analysis.art$post_hoc$`content:audience`$interaction_plot
analysis.art$post_hoc$`timed:content:audience`
analysis.art$post_hoc$`timed:content:audience`$interaction_plot
plot
library(dplyr)
library(readr)
library(lubridate)
library(tidyr)
library(ordinal)
library(RVAideMemoire)
library(car)
library(emmeans)
path.cur <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_delim("full.csv", delim = "\t")
df <- data.raw %>%
group_by(pid, condNumber) %>%
mutate(interactionIndexCorrected = n()) %>%
filter(borg != "undef")
View(df)
View(df)
names(df)
names(df)[4:9]
data.model <- lazy_model(df, participant = "pid", within.vars = names(df)[4:9])
data.model
lazy_plot(data.model, dv = "borg")
lazy_plot(data.model, dv = "borg", ivs = names(df)[4:7])
View(df)
df$borgNum <- as.numeric(df$borg)
data.model <- lazy_model(df, participant = "pid", within.vars = names(df)[4:9])
lazy_plot(data.model, dv = "borgNum", ivs = names(df)[4:7])
lazy_plot(data.model, dv = "borgNum", ivs = names(df)[4:8])
lazy_plot(data.model, dv = "borgNum", ivs = names(df)[4:])
lazy_plot(data.model, dv = "borgNum", ivs = names(df)[4:7])
lazy_descriptives(data.model, dv = "borgNum")
desc <- lazy_descriptives(data.model, dv = "borgNum")
desc$interaction_typ_x_interaction_distance_x_ui_element_x_element_granularity_x_element_direction_x_element_target
lazy_latex(desc$interaction_typ_x_interaction_distance_x_ui_element_x_element_granularity_x_element_direction_x_element_target)
install.packages("plotly")
library(plotly)
plot_ly(df, x = ~interactionTyp, y = ~interactionDistance, z = ~uiElement) %>%
add_lines(color = ~borgNr) %>%
layout(
scene = list(
xaxis = list(title = "MPG city"),
yaxis = list(title = "MPG highway"),
zaxis = list(title = "Number of cylinders")
)
)
plot_ly(df, x = ~interactionTyp, y = ~interactionDistance, z = ~uiElement) %>%
add_lines(color = ~borgNum) %>%
layout(
scene = list(
xaxis = list(title = "MPG city"),
yaxis = list(title = "MPG highway"),
zaxis = list(title = "Number of cylinders")
)
)
plot_ly(df, x = ~interactionTyp, y = ~interactionDistance, z = ~uiElement) %>%
add_lines(color = ~borgNum)
plot_ly(df, x = ~interactionTyp, y = ~interactionDistance, z = ~uiElement) %>%
add_marker(color = ~borgNum)
plot_ly(df, x = ~interactionTyp, y = ~interactionDistance, z = ~uiElement) %>%
add_markers(color = ~borgNum)
lazy_plot(data.model, dv = "borgNum", ivs = names(df)[4:7])
names(df)[4:9]
## plot
ivs <- names(df)[4:9]
p1 <- lazy_plot(data.model, dv = "borgNum", ivs = c(ivs[1], ivs[2]), fun.error = se)
## plot
iv <- names(df)[4:9]
p1 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[1], iv[2]), fun.error = se)
p1 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[1], iv[2]))
p1
p1 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[1], iv[2]))
p2 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[2]))
p3 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[4]))
p4 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[5]))
p5 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[6]))
p6 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[1], iv[2]))
p7 <- lazy_plot(data.model, dv = "borgNum", ivs = c(iv[3], iv[2], iv[6]))
p6
lazy_arrange_plots(p2,p3,p4,p5,p6,p7)
p22 <- lazy_arrange_plots(p2,p3,p4,p5,p6,p7)
library(cowplot)
plot_grid(p1, p22)
plot_grid(p1, p22, rel_widths = c(1, 6))
p2
p3
p22 <- lazy_arrange_plots(p2,p3,p4,p5,p6,p7)
p3
p4
p3
p4
p5
p1 <- lazy_plot(data.model, dv = "borgNum", ivs = c("interactionTyp", "uiElement"))
p1
descriptives <- lazy_descriptives(data.model, "borgNum")
lazy_latex(descriptives$element_granularity)
library(tidyverse)
library(lazyhci)
library(janitor)
library(egg)
library(stickylabeller)
library(cocor)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("mainstudy.csv", col_types = cols(detectionTime=col_character(), submissionTime=col_character()))
data.raw$detectionTime <- parse_number(data.raw$detectionTime, locale = locale(decimal_mark = ",", grouping_mark = "."))
data.raw$submissionTime <- parse_number(data.raw$submissionTime, locale = locale(decimal_mark = ",", grouping_mark = "."))
data.raw$participantID <- as.factor(data.raw$participantID)
data.raw$actuationMethode <- as.factor(data.raw$actuationMethode)
data.raw$on_actuator <- data.raw$direction %in% c(45, 135, 225, 315)
data.raw$angle_diff <- data.raw$direction - data.raw$guessedDirection
data.raw$angle_diff <- (data.raw$angle_diff + 180) %% 360 - 180
data.raw$error <- sqrt((data.raw$angle_diff / 45)^2)
data.raw$on_actuator <- as.factor(data.raw$on_actuator)
data.raw <- clean_names(data.raw)
data.raw %>% group_by(on_actuator) %>% summarise(guess_mean = mean(certainty_of_guess))
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#ee4035", "#f37736", "#fdf498", "#7bc043", "#0392cf")
colorscale.scale <- c("#FFC20A", "#0C7BDC")
basesize = 24
basesize.likert = 24
order <- c("Cool", "Position", "Orientation", "No Undo")
data.plot <- data.raw %>%
mutate(
actuation_methode = fct_recode(actuation_methode,
"Warm" = "DirectionHot",
"Cool" = "DirectionCold"
),
on_actuator = fct_recode(on_actuator,
"on actuator" = "TRUE",
"not on actuator" = "FALSE"
)
) %>%
mutate(
"Detection Time (in s)" = detection_time,
"Normalized Error" = error,
"Certainty of Guess" = certainty_of_guess,
"Actuation Direction" = actuation_methode,
"Actuation Position" = on_actuator
)
IVs = c("Actuation Direction", "Actuation Position")
checkmate::assert_list(colorscale.scale)
checkmate::assert_character(colorscale.scale)
devtools::load_all()
devtools::load_all()
library(tidyverse)
library(lazyhci)
library(janitor)
library(egg)
library(stickylabeller)
library(cocor)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("mainstudy.csv", col_types = cols(detectionTime=col_character(), submissionTime=col_character()))
data.raw$detectionTime <- parse_number(data.raw$detectionTime, locale = locale(decimal_mark = ",", grouping_mark = "."))
data.raw$submissionTime <- parse_number(data.raw$submissionTime, locale = locale(decimal_mark = ",", grouping_mark = "."))
data.raw$participantID <- as.factor(data.raw$participantID)
data.raw$actuationMethode <- as.factor(data.raw$actuationMethode)
data.raw$on_actuator <- data.raw$direction %in% c(45, 135, 225, 315)
data.raw$angle_diff <- data.raw$direction - data.raw$guessedDirection
data.raw$angle_diff <- (data.raw$angle_diff + 180) %% 360 - 180
data.raw$error <- sqrt((data.raw$angle_diff / 45)^2)
data.raw$on_actuator <- as.factor(data.raw$on_actuator)
data.raw <- clean_names(data.raw)
data.raw %>% group_by(on_actuator) %>% summarise(guess_mean = mean(certainty_of_guess))
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#ee4035", "#f37736", "#fdf498", "#7bc043", "#0392cf")
colorscale.scale <- c("#FFC20A", "#0C7BDC")
basesize = 24
basesize.likert = 24
order <- c("Cool", "Position", "Orientation", "No Undo")
data.plot <- data.raw %>%
mutate(
actuation_methode = fct_recode(actuation_methode,
"Warm" = "DirectionHot",
"Cool" = "DirectionCold"
),
on_actuator = fct_recode(on_actuator,
"on actuator" = "TRUE",
"not on actuator" = "FALSE"
)
) %>%
mutate(
"Detection Time (in s)" = detection_time,
"Normalized Error" = error,
"Certainty of Guess" = certainty_of_guess,
"Actuation Direction" = actuation_methode,
"Actuation Position" = on_actuator
)
IVs = c("Actuation Direction", "Actuation Position")
plot.model <- lazy_model(data.plot, within.vars = IVs, participant = "participant_id")
plot.errors <- lazy_plot(lazy_model = plot.model, dv = "Normalized Error",  fun.error = se, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale, p.basesize = basesize)
plot.errors
plot.detection_time <- lazy_plot(lazy_model = plot.model, dv = "Detection Time (in s)",  fun.error = se, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale, p.basesize = basesize)
plot.detection_time
plot.1 <- grid_arrange_shared_legend(plot.detection_time, plot.errors)
ggsave(filename = file.path(getwd(), "PAPER_results.pdf"), plot = plot.1, width = 18, height = 6, device = cairo_pdf)
plot.1 <- grid_arrange_shared_legend(plot.detection_time, plot.errors)
plot.1 <- lazy_arrange_plots(plot.detection_time, plot.errors)
ggsave(filename = file.path(getwd(), "PAPER_results.pdf"), plot = plot.1, width = 18, height = 6, device = cairo_pdf)
devtools::install()
a
devtools::install()
devtools::install()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
