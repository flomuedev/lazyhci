data_summary_plot(DV = "PEI - Social Presence", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank())
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
p1 <- p1 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
p1 <- p1 +  lims(y = c(0, 2.5))
p2 <- p2 +  lims(y = c(0, 2.5))
p3 <- p3 +  lims(y = c(0, 2.5))
p4 <- p4 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
## plot social relationship
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#c90202", "#ce4c00", "#c97700", "#bb9c00", "#a3bf00", "#7ce000","#0aff64")
colorscale.scale <- c("#648FFF", "#FE6100", "#785EF0", "#FFB000", "#DC267F")
basesize = 20
basesize.likert = 24
p1 <- data.raw %>%
mutate(
'PEI - Psychosocial' = ge_psychosocial,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Psychosocial", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p2 <- data.raw %>%
mutate(
'PEI - Functional' = ge_functional,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Functional", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p3 <- data.raw %>%
mutate(
'Inclusion of Other in the Self (IOS) Scale' = social_relationship,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "Inclusion of Other in the Self", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#c90202", "#ce4c00", "#c97700", "#bb9c00", "#a3bf00", "#7ce000","#0aff64")
colorscale.scale <- c("#648FFF", "#FE6100", "#785EF0", "#FFB000", "#DC267F")
basesize = 20
basesize.likert = 24
p1 <- data.raw %>%
mutate(
'PEI - Psychosocial' = ge_psychosocial,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Psychosocial", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p2 <- data.raw %>%
mutate(
'PEI - Functional' = ge_functional,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Functional", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p3 <- data.raw %>%
mutate(
'Inclusion of Other in the Self' = social_relationship,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "Inclusion of Other in the Self", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
'PEI - Social Presence' = geq_social,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
#p3 <- data.raw %>%
#  mutate(
#    viz_type = recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
#    viz_count = recode(viz_count, single = "Single", multi = "Multi", none = "None"),
#    viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
#    'Inclusion of Other in the Self (IOS) Scale' = social_relationship,
#    'Level of Abstraction' = viz_type,
#    'Amount of Information' = viz_count
#  ) %>%
#  data_summary_plot(DV = "Inclusion of Other in the Self (IOS) Scale", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p1 <- p1 +  lims(y = c(0, 2.5))
p2 <- p2 +  lims(y = c(0, 2.5))
p3 <- p3 +  lims(y = c(0, 2.5))
p4 <- p4 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
ggsave(filename = file.path(getwd(), "plot.combined.pdf"), plot = plot.combined, width = 18, height = 4, device = cairo_pdf)
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
'PEI - Social Presence' = geq_social,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p4
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#c90202", "#ce4c00", "#c97700", "#bb9c00", "#a3bf00", "#7ce000","#0aff64")
colorscale.scale <- c("#648FFF", "#FE6100", "#785EF0", "#FFB000", "#DC267F")
basesize = 20
basesize.likert = 24
p1 <- data.raw %>%
mutate(
'PEI - Psychosocial' = ge_psychosocial,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Psychosocial", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p2 <- data.raw %>%
mutate(
'PEI - Functional' = ge_functional,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Functional", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p3 <- data.raw %>%
mutate(
'Inclusion of Other in the Self' = social_relationship,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "Inclusion of Other in the Self", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
'PEI - Social Presence' = geq_social,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
#p3 <- data.raw %>%
#  mutate(
#    viz_type = recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
#    viz_count = recode(viz_count, single = "Single", multi = "Multi", none = "None"),
#    viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
#    'Inclusion of Other in the Self (IOS) Scale' = social_relationship,
#    'Level of Abstraction' = viz_type,
#    'Amount of Information' = viz_count
#  ) %>%
#  data_summary_plot(DV = "Inclusion of Other in the Self (IOS) Scale", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p1 <- p1 +  lims(y = c(0, 2.5))
p2 <- p2 +  lims(y = c(0, 2.5))
p3 <- p3 +  lims(y = c(0, 2.5))
p4 <- p4 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
ggsave(filename = file.path(getwd(), "plot.combined.pdf"), plot = plot.combined, width = 18, height = 4, device = cairo_pdf)
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#c90202", "#ce4c00", "#c97700", "#bb9c00", "#a3bf00", "#7ce000","#0aff64")
colorscale.scale <- c("#648FFF", "#FE6100", "#785EF0", "#FFB000", "#DC267F")
basesize = 20
basesize.likert = 24
p1 <- data.raw %>%
mutate(
'PEI - Psychosocial' = ge_psychosocial,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Psychosocial", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p2 <- data.raw %>%
mutate(
'PEI - Functional' = ge_functional,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Functional", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p3 <- data.raw %>%
mutate(
'Inclusion of Other in the Self' = social_relationship,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "Inclusion of Other in the Self", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
'PEI - Social Presence' = geq_social,
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
#p3 <- data.raw %>%
#  mutate(
#    viz_type = recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
#    viz_count = recode(viz_count, single = "Single", multi = "Multi", none = "None"),
#    viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
#    'Inclusion of Other in the Self (IOS) Scale' = social_relationship,
#    'Level of Abstraction' = viz_type,
#    'Amount of Information' = viz_count
#  ) %>%
#  data_summary_plot(DV = "Inclusion of Other in the Self (IOS) Scale", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Level of Abstraction", "Amount of Information"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p1 <- p1 +  lims(y = c(0, 2.5))
p2 <- p2 +  lims(y = c(0, 2.5))
p3 <- p3 +  lims(y = c(0, 2.5))
p4 <- p4 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
ggsave(filename = file.path(getwd(), "plot.combined.pdf"), plot = plot.combined, width = 18, height = 4, device = cairo_pdf)
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p4 <- data.raw %>%
filter(!participant %in% c(16, 23, 4, 13, 20, 29, 1)) %>%
mutate(
viz_type = dplyr::recode(viz_type, ecg = "ECG", hearts = "Hearts", none = "None"),
viz_count = dplyr::recode(viz_count, single = "Single", multi = "Multi", none = "None"),
viz_count = factor(viz_count, levels = c("Single", "Multi", "None")),
Visualization = factor(visualization, levels = c("single ECG", "single hearts", "multi ECG", "multi hearts", "No vis")),
'PEI - Social Presence' = geq_social,
'Level of Abstraction' = viz_type,
'Amount of Information' = viz_count
) %>%
data_summary_plot(DV = "PEI - Social Presence", IVs = c("Visualization"), fun.error = se, p.basesize = basesize, theme.fontfamily = plots.font.family, p.scale_fill_manual = colorscale.scale) + theme(axis.title.x=element_blank(), axis.text.x = element_blank())
p1 <- p1 +  lims(y = c(0, 2.5))
p2 <- p2 +  lims(y = c(0, 2.5))
p3 <- p3 +  lims(y = c(0, 2.5))
p4 <- p4 +  lims(y = c(0, 2.5))
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3)
ggsave(filename = file.path(getwd(), "plot.combined.pdf"), plot = plot.combined, width = 18, height = 4, device = cairo_pdf)
plot.combined <- grid_arrange_shared_legend(p1,p2,p4,p3, position = "right")
ggsave(filename = file.path(getwd(), "plot.combined.pdf"), plot = plot.combined, width = 18, height = 4, device = cairo_pdf)
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#a71111", "#cc6621", "#f0d09d", "#ffffe0", "#b9d6c7", "#297878", "#003233")
basesize = 24
basesize.likert = 24
plot.1 <- plot_likert(results$vis_evaluation_the_visualization_distracted_me_from_playing_the_game$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert)
# filter no_viz
data.with_viz <- data.raw %>% filter(visualization != "No vis")
data.with_viz$visualization <- fct_drop(data.with_viz$visualization)
data.with_viz <- data.with_viz %>%
mutate(
viz_count = case_when(visualization == "single hearts" || visualization == "single ECG"  ~ "Single",
visualization == "multi hearts" || visualization == "multi ECG"  ~ "Multi"
),
viz_style = case_when(visualization == "single hearts" || visualization == "multi hearts"  ~ "Hearts",
visualization == "single ECG" || visualization == "multi ECG"  ~ "ECG"
)
)
data.with_viz.geq_social <- data.with_viz %>% filter(!participant %in% c(16,23,4))
friedman.geq_social <- friedman_with_posthoc(y = data.with_viz.geq_social$geq_social, groups = data.with_viz.geq_social$visualization, blocks = data.with_viz.geq_social$participant)
#check_complete_design(data.with_viz, within.vars = c("visualization"), participantCol = "participant", DV = "vis_evaluation_ifeel_i_got_confused_about_how_others_had_felt_in_the_vr_through_the_heartbeat_visualization")
# -> missing 24,4,16,21,23,34
data.with_viz.vis1 <- data.with_viz %>% filter(!participant %in% c(24,4,16,21,23,34))
friedman_with_posthoc(y = data.with_viz.vis1$vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization, groups = data.with_viz.vis1$visualization, blocks = data.with_viz.vis1$participant)
data.with_viz$viz_count <- as.factor(data.with_viz$viz_count)
data.with_viz$viz_style <- as.factor(data.with_viz$viz_style)
data.with_viz$participant <- as.factor(data.with_viz$participant)
likert.understood.data <- data.with_viz %>%
filter(!is.na(vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization))
likert.understood <- likert_plot_model(data=likert.understood.data, DV = "vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization", IVs = c("viz_count", "viz_style"), participantCol = "participant")
art.understand <- aov_art_fit.internal(data=likert.understood.data, DV = "vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization", within.vars = c("viz_count", "viz_style"), participant = "participant")
aov_art_fit.internal <- function(data, DV, participant, within.vars = c(), between.vars = c(), posthoc.adj="bonferroni", es = c("ges", "pes", "none"), art.type = c("aov", "lme")) {
require(ARTool)
require(effectsize)
data.internal <- as.data.frame(data)
art.type <- rlang::arg_match(art.type)
es <- rlang::arg_match(es)
formula.aov <- paste(
DV,
" ~ ",
"(",
paste(c(within.vars, between.vars), collapse ="*"),
")",
" + ",
"Error(",
participant,
"/",
"(",
paste(within.vars, collapse ="*"),
"))",
sep=""
)
formula.lme <- paste(
DV,
" ~ ",
"(",
paste(c(within.vars, between.vars), collapse ="*"),
")",
" + ",
"(1|",
participant,
")",
sep=""
)
print(formula.aov)
m.aov <- art(as.formula(formula.aov), data=data)
m.lme <- art(as.formula(formula.lme), data=data)
return(list("m.aov" = m.aov, "m.lme" = m.lme))
}
analyze_question <- function(data, question, IVs) {
require(sets)
require(emmeans)
groupnames.sets <- as.list(sets::set_power(IVs))
groupnames.sets <- groupnames.sets[lapply(groupnames.sets,length)>0]
if("package:sets" %in% search()) detach("package:sets", unload=TRUE) # sets is evil.
data <- data %>% filter(!is.na(!!as.name(question)))
IVcols = data %>%
unite(
IVcol, IVs
)
incomplete_participants = data %>%
group_by(participant) %>%
summarise(n = n()) %>%
filter(
n!=length(unique(IVcols$IVcol))
) %>%
select(participant)
data <- data %>% filter(!participant %in% (incomplete_participants %>% pull()))
art <- aov_art_fit.internal(data=data, DV = question, within.vars = IVs, participant = "participant")
likert_model <- likert_plot_model(data=data, DV = question, IVs = IVs, participantCol = "participant", grouping = IVs[[2]], survey_vector = "likert-7")
emmeans <- list()
emmips <- list()
art_cons <- list()
for(set in groupnames.sets) {
vars <- as.list(set)
name = paste(vars, collapse ="_x_")
formula1 <- as.formula(paste("~", paste(vars, collapse = ":"), sep=""))
#~ orientation_undo:movement_visualization
emmeans_tmp <-  emmeans(artlm(art$m.lme, paste(vars, collapse = ":")), formula1)
emmeans[[name]] <- emmeans_tmp
if(length(vars) == 2) {
formula2 <- as.formula(paste(vars[[1]], "~", vars[[2]], sep=""))
emmip_tmp <- emmip(emmeans_tmp, formula2)
emmips[[name]] <- emmip_tmp
#orientation_undo ~ movement_visualization
} else if(length(vars) == 3) {
formula2 <- as.formula(paste(vars[[1]], "~", vars[[2]], " | ", vars[[3]], sep=""))
emmip_tmp <- emmip(emmeans_tmp, formula2)
emmips[[name]] <- emmip_tmp
}
art.con <- art.con(art$m.lme, paste(vars, collapse = ":"))
art_cons[[name]] <- art.con
}
anova <- anova(art$m.aov)
return(list(art=art, anova=anova, artcons = art_cons, likert=likert_model, emmeans = emmeans, emmips = emmips))
}
# filter no_viz
data.with_viz <- data.raw %>% filter(visualization != "No vis")
data.with_viz$visualization <- fct_drop(data.with_viz$visualization)
data.with_viz <- data.with_viz %>%
mutate(
viz_count = case_when(visualization == "single hearts" || visualization == "single ECG"  ~ "Single",
visualization == "multi hearts" || visualization == "multi ECG"  ~ "Multi"
),
viz_style = case_when(visualization == "single hearts" || visualization == "multi hearts"  ~ "Hearts",
visualization == "single ECG" || visualization == "multi ECG"  ~ "ECG"
)
)
data.with_viz.geq_social <- data.with_viz %>% filter(!participant %in% c(16,23,4))
friedman.geq_social <- friedman_with_posthoc(y = data.with_viz.geq_social$geq_social, groups = data.with_viz.geq_social$visualization, blocks = data.with_viz.geq_social$participant)
#check_complete_design(data.with_viz, within.vars = c("visualization"), participantCol = "participant", DV = "vis_evaluation_ifeel_i_got_confused_about_how_others_had_felt_in_the_vr_through_the_heartbeat_visualization")
# -> missing 24,4,16,21,23,34
data.with_viz.vis1 <- data.with_viz %>% filter(!participant %in% c(24,4,16,21,23,34))
friedman_with_posthoc(y = data.with_viz.vis1$vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization, groups = data.with_viz.vis1$visualization, blocks = data.with_viz.vis1$participant)
data.with_viz$viz_count <- as.factor(data.with_viz$viz_count)
data.with_viz$viz_style <- as.factor(data.with_viz$viz_style)
data.with_viz$participant <- as.factor(data.with_viz$participant)
likert.understood.data <- data.with_viz %>%
filter(!is.na(vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization))
likert.understood <- likert_plot_model(data=likert.understood.data, DV = "vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization", IVs = c("viz_count", "viz_style"), participantCol = "participant")
art.understand <- aov_art_fit.internal(data=likert.understood.data, DV = "vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization", within.vars = c("viz_count", "viz_style"), participant = "participant")
likert.understood <- likert_plot_model(data=likert.understood.data, DV = "vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization", IVs = c("viz_count", "viz_style"), participantCol = "participant")
## analysis questions
#
questions <- names(data.with_viz)[grep("^vis_evaluation*", names(data.with_viz))]
questions <- questions[-c(5,10)]
results <- list()
for(question in questions) {
print(paste0("Analyzing ", question))
res <- analyze_question(data.with_viz, question, IVs = c("viz_count", "viz_style"))
results[[question]] <- res
}
results$vis_evaluation_the_visualization_distracted_me_from_playing_the_game$anova
results$vis_evaluation_the_visualization_distracted_me_from_playing_the_game$emmeans$viz_count
results$vis_evaluation_the_visualization_distracted_me_from_playing_the_game$artcons$viz_count
results$vis_evaluation_the_visualization_supported_me_in_playing_the_game$anova
results$vis_evaluation_the_visualization_supported_me_in_playing_the_game$emmean$viz_style
results$vis_evaluation_the_visualization_made_me_feel_emotionally_attached_to_other_players$anova
results$vis_evaluation_the_visualization_made_me_feel_emotionally_attached_to_other_players$emmean$viz_style
results$vis_evaluation_the_visualization_made_me_feel_emotionally_attached_to_other_players$emmips$viz_count_x_viz_style
results$vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization$anova
results$vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization$anova
plots.font.family <- "Linux Biolinum"
colorscale.likert <- c("#a71111", "#cc6621", "#f0d09d", "#ffffe0", "#b9d6c7", "#297878", "#003233")
basesize = 24
basesize.likert = 24
plot.1 <- plot_likert(results$vis_evaluation_the_visualization_distracted_me_from_playing_the_game$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert)
plot.2 <- plot_likert(results$vis_evaluation_the_visualization_supported_me_in_playing_the_game$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert, yblank = TRUE)
plot.3 <- plot_likert(results$vis_evaluation_the_visualization_made_me_feel_emotionally_attached_to_other_players$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert, yblank = TRUE)
plot.4 <- plot_likert(results$vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert)
plot.5 <- plot_likert(results$vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert, yblank = TRUE)
plot.1
likert.combined <- grid_arrange_shared_legend(plot.1, plot.2, plot.3)
likert.combined <- grid_arrange_shared_legend(plot.1, plot.2, plot.3, plot.4, plot.5)
plot.4 <- plot_likert(results$vis_evaluation_ifeel_i_understood_how_others_had_felt_the_vr_through_the_heartbeat_visualization$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert, yblank=TRUE)
plot.5 <- plot_likert(results$vis_evaluation_ifeel_i_understood_what_others_had_done_in_the_vr_through_the_heartbeat_visualization$likert, ordered = FALSE, percentagelabel = FALSE, theme.fontfamily = plots.font.family, p.basesize = basesize.likert, colorscale = colorscale.likert, yblank = TRUE)
likert.combined <- grid_arrange_shared_legend(plot.1, plot.2, plot.3, plot.4, plot.5)
likert.combined <- grid_arrange_shared_legend(plot.1, plot.2, plot.3, plot.4, plot.5)
ggsave(filename = file.path(getwd(), "PAPER_likert.pdf"), plot = likert.combined, width = 18, height = 5, device = cairo_pdf)
data.raw <- readxl::read_xlsx("34_participants_interim.xlsx", col_names = TRUE, skip = 1) %>%
janitor::clean_names() %>%
rename(
participant = id_eingabe_01,
visualization = vis_type_01
) %>%
mutate(id = row_number()) %>%
rowwise()
library(tidyverse)
library(lazyhci)
library(janitor)
library(emmeans)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("flo.csv")
data.raw <- janitor::clean_names(data.raw)
data.raw <- data.raw %>% filter(pid != 3)
data_summary_plot(data=data.raw, DV = "mean_delta_time", IVs = c("stance", "circle", "plane"))
ano <- lazy_analyze(data=data.raw, DV = "distance2target", participant = "pid", within.vars = c("stance", "circle", "plane"), analysis_type = "aov", transformation = "log")
ano <- lazy_analyze(data=data.raw, DV = "mean_delta_time", participant = "pid", within.vars = c("stance", "circle", "plane"), analysis_type = "aov", transformation = "log")
data_summary_plot(data=data.raw, DV = "mean_delta_time", IVs = c("stance", "circle", "plane"))
ano$model$anova_table
ano$post_hoc$circle
ano$post_hoc$circle$`pairwise differences of circle`
ano$post_hoc$circle$`emmeans of circle`
ano$descriptives
View(data.raw)
ano <- lazy_analyze(data=data.raw, DV = "distance2target", participant = "pid", within.vars = c("stance", "circle", "plane"), analysis_type = "aov")
data_summary_plot(data=data.raw, DV = "distance2target", IVs = c("stance", "circle", "plane"))
plot(ano$normality_test)
ano <- lazy_analyze(data=data.raw, DV = "mean_delta_time", participant = "pid", within.vars = c("stance", "circle", "plane", "task_axis"), analysis_type = "aov")
ano$model$anova_table
devtools::document()
devtools::install()
library(tidyverse)
library(lazyhci)
library(janitor)
library(emmeans)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data.raw <- read_csv("flo.csv")
data.raw <- janitor::clean_names(data.raw)
data.raw <- data.raw %>% filter(pid != 3)
data_summary_plot(data=data.raw, DV = "distance2target", IVs = c("stance", "circle", "plane"))
ano <- lazy_analyze(data=data.raw, DV = "mean_delta_time", participant = "pid", within.vars = c("stance", "circle", "plane", "task_axis"), analysis_type = "aov")
ano$model$anova_table
data_summary_plot(data=data.raw, DV = "mean_delta_time", IVs = c("stance", "circle", "plane", "task_axis"))
View(data.raw)
data_summary_plot(data=data.raw, DV = "mean_delta_time", IVs = c("stance", "circle", "plane", "fnished_task_with_mainhand"))
data_summary_plot(data=data.raw, DV = "mean_delta_time", IVs = c("stance", "circle", "plane", "finished_task_with_mainhand"))
ano <- lazy_analyze(data=data.raw, DV = "mean_delta_time", participant = "pid", within.vars = c("stance", "circle", "plane", "task_axis", "finished_task_with_mainhand"), analysis_type = "aov")
ano <- lazy_analyze(data=data.raw, DV = "mean_delta_time", participant = "pid", within.vars = c("stance", "circle", "plane", "finished_task_with_mainhand"), analysis_type = "aov")
plot(ano$normality_test)
ano$model$anova_table
ano$descriptives$plane
View(data.raw)
data.raw <- data.raw %>% filter(distance2target > 0)
View(data.raw)
data_summary_plot(data=data.raw, DV = "distance2target", IVs = c("stance", "circle", "plane", "finished_task_with_mainhand"))
ano <- lazy_analyze(data=data.raw, DV = "distance2target", participant = "pid", within.vars = c("stance", "circle", "plane"), analysis_type = "aov")
plot(ano$normality_test)
ano <- lazy_analyze(data=data.raw, DV = "distance2target", participant = "pid", within.vars = c("stance", "circle", "plane"), analysis_type = "aov", transformation = "log")
plot(ano$normality_test)
ano$model$anova_table
ano$post_hoc$circle$`pairwise differences of circle`
ano$descriptives$circle
ano$post_hoc$`stance:circle`$`pairwise differences of stance, circle`
ano$post_hoc$`stance:circle`$interaction_plot
ano$post_hoc$`circle:plane`$interaction_plot
ano$post_hoc$`circle:plane`$`pairwise differences of circle, plane`
ano <- lazy_analyze(data=data.raw, DV = "distance2target", participant = "pid", within.vars = c("stance", "circle", "plane", "task_axis"), analysis_type = "aov", transformation = "log")
ano$normality_test
plot(ano$normality_test)
ano$model$anova_table
ano$post_hoc$task_axis
ano$post_hoc$task_axis$`pairwise differences of task_axis`
ano$descriptives$task_axis
ano$post_hoc$`stance:task_axis`$interaction_plot
ano$post_hoc$`stance:task_axis`$`pairwise differences of stance, task_axis`
sessionInfo()
