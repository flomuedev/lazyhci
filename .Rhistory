if(length(groupnames) == 4) {
p <- p + facet_grid(as.formula(paste(groupnames[3], "~", groupnames[4], sep=" ")))
}
if(!is.null(theme.fontfamily))
p <- p + theme_minimal(base_family = theme.fontfamily, base_size = p.basesize)
else
p <- p + theme_minimal(base_size = p.basesize)
p <- p + theme(plot.title = element_text(hjust = 0.5)) + theme(legend.position="bottom")
if(!is.null(p.title)) {
p <- p + ggtitle(p.title)
}
return(p)
}
reshape_to_wide_all <- function(data, varnames, groupnames, ParticipantColName, outdir, prefix){
dir.create(outdir)
library(sets)
groupnames.sets <- set_power(groupnames)
detach("package:sets", unload=TRUE)
for(set in groupnames.sets) {
set <- unlist(set)
if(any(length(set) < 1) ) {
message("Sorry, I don't know how to handle the set.")
} else {
reshaped <- reshape_to_wide(data, varnames, set, ParticipantColName)
groupingString <- paste("_by", paste(set, collapse="_"), sep="_")
varnamesString <- paste(varnames, collapse="_")
filename = paste(prefix, "_", varnamesString, "_", groupingString, "_wide.csv", sep="")
outPath = file.path(outdir, filename)
write.csv(reshaped, file=outPath)
}
}
}
reshape_to_wide <- function(data, IVs, groupnames, ParticipantColName){
require(data.table)
data.wide <- data.table::dcast(setDT(data), formula = as.formula(paste(ParticipantColName, "~",  paste(groupnames, collapse="+"))), value.var = IVs, fun.aggregate = mean, na.rm = TRUE)
return(data.wide)
}
rbind_create <- function(data, row) {
if(is.null(data))
data <- row
else
data <- rbind(data, row)
return(data)
}
check_font_support("Pristinas")
ensure_font_support("Pristinas")
ensure_font_support("Pristina")
library("devtools")
install.packages(c("bayestestR", "datawizard", "Exact", "insight", "openssl", "Rttf2pt1"))
install_github("neuropsychology/psycho.R")
library("psycho")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("easystats/report")
library(tidyverse)
library(summarize)
data.raw <- read_csv2("C:/Users/Flo/OneDrive/Uni/src/test.csv")
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
return(TRUE)
}
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
data.raw %>% group_by(Bet1) %>% summarize(n=n())
View(data.raw)
library(tidyverse)
library(summarize)
data.raw <- read_csv2("C:/Users/Flo/OneDrive/Uni/src/test.csv")
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
return(TRUE)
}
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
data.raw %>% group_by(Bet1) %>% summarize(n=n())
data.raw %>% group_by(Bet1) %>% summarize(n=n()) %>% select(n) %>% pull()
data.raw %>% group_by(Bet1) %>% summarize(n=n()) %>% select(n) %>% pull() %>% unique()
data.raw %>% group_by(Bet1) %>% summarize(n=n()) %>% select(n) %>% pull() %>% unique() %>% length()
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
between.groupsizes <- data %>%
group_by_at(between.vars) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
if(between.groupsizes != 1) {
warning("WARNING: Your between-groups are not equal-sized. This might be totally fine, just be sure about what your doing.")
}
return(TRUE)
}
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
data.raw %>% group_by(Bet1, Participant) %>% summarize(n=n())
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
between.groupsizes <- data %>%
group_by_at(between.vars) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
between.groupsizes.participant <- data %>%
group_by_at(c(between.vars, participantCol)) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
if(between.groupsizes != 1) {
warning("WARNING: Your between-groups are not equal-sized. This might be totally fine, just be sure about what your doing.")
}
if(between.groupsizes != 1) {
warning("WARNING: Your you have (at least) one between groups factor that varies within a participant. This is rather strange.")
}
return(TRUE)
}
l
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
between.groupsizes <- data %>%
group_by_at(between.vars) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
between.groupsizes.participant <- data %>%
group_by_at(c(between.vars, participantCol)) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
if(between.groupsizes != 1) {
warning("WARNING: Your between-groups are not equal-sized. This might be totally fine, just be sure about what your doing.")
}
if(between.groupsizes.participant != 1) {
warning("WARNING: Your you have (at least) one between groups factor that varies within a participant. This is rather strange.")
}
return(TRUE)
}
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
library(tidyverse)
library(summarize)
data.raw <- read_csv2("C:/Users/Flo/OneDrive/Uni/src/test.csv")
#' check_complete_design
#'
#' This function checks if the data is complete for your design for one DV
#' @param data the data
#' @param within.vars a vector of the names of your within IV cols
#' @param between.vars a vector of the names of your between IV cols
#' @param participantCol the name of your participant ID col
#' @param DV the name of the dependent variable column
#' @export
check_complete_design <- function(data, within.vars, between.vars, participantCol, DV) {
data.sum <- data %>%
dplyr::group_by_at(c(within.vars, participantCol), .drop=FALSE) %>%
dplyr::summarise(
n = n(),
val = mean(!!as.name(DV))
)
missing <- data.sum %>%
filter(n == 0)
higher <- data.sum %>%
filter(n > 1)
na.nan <- data.sum %>%
filter(is.na(val) || is.nan(val))
between.groupsizes <- data %>%
group_by_at(between.vars) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
between.groupsizes.participant <- data %>%
group_by_at(c(between.vars, participantCol)) %>%
summarize(n=n()) %>%
select(n) %>%
pull() %>%
unique() %>%
length()
if(nrow(missing) != 0) {
warning("This is not a complete design, go and yell at the student. The following condition data is missing:")
warning("")
warning(as.data.frame(missing))
return(FALSE)
}
if(nrow(na.nan) != 0) {
warning("There are NAs or NANs in the table, go and yell at the student. The following conditions contain NAs or NANs:")
warning("")
warning(na.nan)
return(FALSE)
}
if(nrow(higher) != 0) {
warning("WARNING: Your data seems to contain multiple repetitions. The table should be collapsed before the ANOVA.")
#print("")
#print(higher)
}
if(between.groupsizes != 1) {
warning("WARNING: Your between-groups are not equal-sized. This might be totally fine, just be sure about what your doing.")
}
if(between.groupsizes.participant != 1) {
warning("WARNING: Your you have (at least) one between groups factor that varies within a participant. This is rather strange.")
}
return(TRUE)
}
check_complete_design(data.raw, within.vars = c("Wid1", "Wid2"), between.vars = c("Bet1"), participantCol = "Participant", DV = "val")
setwd("C:/Users/Flo/OneDrive/Uni/src/summarize")
library(devtools)
library(roxygen2)
document()
setwd("..")
install("summarize")
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
raw_data_folder <- "raw"
doImport <- TRUE
rbind_create <- function(data, row) {
if(is.null(data))
data <- row
else
data <- rbind(data, row)
return(data)
}
if(doImport) {
skip.participant <- c("questionnaire")
data.raw <- NULL
data.broken <- NULL
for(participant in list.files(file.path(getwd(), raw_data_folder))) {
if(!participant %in% skip.participant) {
print(paste("importing ", participant))
for(condition in list.files(file.path(getwd(), raw_data_folder, participant))) {
parts <- str_split(condition, "_", simplify = TRUE)
filetoread <- file.path(getwd(), raw_data_folder, participant, condition, "cond.csv")
if(file.exists(filetoread)) {
condition.data <- read_csv2(file.path(getwd(), raw_data_folder, participant, condition, "cond.csv"))
if(nrow(condition.data) != 0) {
condition.data$toes <- parts[1]
condition.data$posture <- parts[2]
condition.data$granularity <- parts[3]
condition.data$direction <- parts[4]
condition.data$foot <- parts[5]
condition.data$overshoot <- condition.data$`overshoot?`
condition.data$`overshoot?` <- NULL
condition.data$errorAtClickABS <- abs(condition.data$errorAtClick)
condition.data$maxHoldingErrorABS <- abs(condition.data$maxHoldingError)
if(!("otherToeValueAtClick" %in% colnames(condition.data)))
condition.data$otherToeValueAtClick <- NA
data.raw <- rbind_create(data.raw, condition.data)
} else {
data.broken <- rbind(data.broken, data.frame(participant, condition))
}
} else {
data.broken <- rbind(data.broken, data.frame(participant, condition))
}
}
}
}
data.raw$participant = as.factor(data.raw$participant)
data.raw$conditionName = as.factor(data.raw$conditionName)
data.raw$targetID = as.factor(data.raw$targetID)
data.raw$toes <- as.factor(data.raw$toes)
data.raw$posture <- as.factor(data.raw$posture)
data.raw$granularity <- as.factor(data.raw$granularity)
data.raw$direction <- as.factor(data.raw$direction)
data.raw$foot <- as.factor(data.raw$foot)
data.raw$otherToeValueAtClick <- na_if(data.raw$otherToeValueAtClick, -1)
data.tidy <- data.raw %>%
dplyr::group_by(toes, posture, granularity, direction, targetID, participant) %>%
dplyr::summarise(
n=n(),
timeToClick = mean(timeToClick, na.rm = TRUE),
overshoot = mean(overshoot, na.rm = TRUE),
crossoversBeforeClick = mean(crossoversBeforeClick, na.rm = TRUE),
crossoversAfterClick = mean(crossoversAfterClick, na.rm = TRUE),
successAtClick = mean(successAtClick, na.rm = TRUE),
errorAtClickABS = mean(errorAtClickABS, na.rm = TRUE),
maxHoldingErrorABS = mean(maxHoldingErrorABS, na.rm = TRUE),
otherToeAtClick = mean(otherToeValueAtClick, na.rm = TRUE)
)
data.tidy$successAtClick <- data.tidy$successAtClick * 100
data.tidy$overshoot <- data.tidy$overshoot * 100
### load data questionnaire
data.questionnaire <- NULL
for(file in list.files(file.path(getwd(), raw_data_folder, "questionnaire"), pattern = "*.csv$")) {
data.file <- read_csv2(file.path(getwd(), raw_data_folder, "questionnaire", file))
parts <- str_split(data.file$Condition, "_", simplify = TRUE)
data.file$toes <- as.factor(parts[,1])
data.file$posture <- as.factor(parts[,2])
data.file$granularity <- as.factor(parts[,3])
data.file$direction <- as.factor(parts[,4])
data.file$foot <- as.factor(parts[,5])
data.questionnaire <- rbind(data.questionnaire, data.file)
}
data.questionnaire$Part <- as.factor(data.questionnaire$Part)
}
library(summarize)
View(data.tidy)
ano(data = data.tidy, dv = "timeToClick", participantCol = "participant", within.vars = c("toes", "posture", "granularity", "direction", "targetID"))
build_ez_string.internal <- function(data, dv, participantCol, within.vars = NULL, between.vars = NULL, anova.type = 2) {
ezString <- paste0('ez::ezANOVA(data=', data, ', dv=', dv,', wid=', participantCol, ', ')
if(!is.null(within.vars)) {
ezString <- paste0(ezString,
'within=.(', paste(within.vars, collapse = ",") ,'), '
)
}
if(!is.null(between.vars)) {
ezString <- paste0(ezString,
'between=.(', paste(between.vars, collapse = ",") ,'), '
)
}
ezString <- paste0(ezString,
'type=', anova.type, ', return_aov = TRUE)')
print(ezString)
return(ezString)
}
ano(data = data.tidy, dv = "timeToClick", participantCol = "participant", within.vars = c("toes", "posture", "granularity", "direction", "targetID"))
library(ez)
ano(data = data.tidy, dv = "timeToClick", participantCol = "participant", within.vars = c("toes", "posture", "granularity", "direction", "targetID"))
library(devtools)
library(roxygen2)
document()
setwd("C:/Users/Flo/OneDrive/Uni/src/summarize")
document()
